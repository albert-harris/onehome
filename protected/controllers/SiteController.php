<?php/* * Custom by DTOAN * DATE : 20-3-2014 */class SiteController extends Controller {    public $attempts = 2;    public $counter;    public $childPages = array();    public $curentTitle = '';    public function actions() {        return array(            'captcha' => array(                'class' => 'CCaptchaAction',                'backColor' => 0xFFFFFF,            ),            'page' => array(                'class' => 'CViewAction',            ),        );    }	/*	 * @author Lam Huynh	 */	public function actionIndex() {        if (empty($_GET)){            $this->redirect(Yii::app()->createAbsoluteUrl('site/home'));        }		// build breadscrumb		$searchParams = array('index');		$breadcrumbs = array();				// property type (child)		if (isset($_GET['property_type_code'])) {			$typeIds = $_GET['property_type_code'];			if ($typeIds && $type=ProPropertyType::model()->findByPk(current($typeIds))) {				$searchParams['property_type_code[]'] = $type->id;				$breadcrumbs[$type->name] = $searchParams;			}		}		// district		if (isset($_GET['location'])) {			$locationIds = $_GET['location'];			if ($locationIds && $location=ProLocation::model()->findByPk(current($locationIds))) {				$searchParams['location[]'] = $location->id;				$breadcrumbs[$location->name] = $searchParams;			}		}		// buidling name		if (isset($_GET['building']) && $building=$_GET['building']) {			$searchParams['building'] = $building;			$breadcrumbs[$building] = $searchParams;		}				// listing type: sale/rent		if (isset($_GET['listing_for']) && $listingFor=$_GET['listing_for']) {			$typeText = $listingFor=='for_rent'? "For Rent" : "For Sale";			$searchParams['listing_for'] = $listingFor;			$breadcrumbs[$typeText] = $searchParams;		}		$this->breadcrumbs = $breadcrumbs;		Yii::app()->theme = 'onehome';		Yii::app()->clientScript->coreScriptPosition = CClientScript::POS_BEGIN;		Yii::app()->clientScript->defaultScriptFilePosition = CClientScript::POS_END;		$this->layout = '/layouts/onehome/2-col-left';		$this->pageTitle = sprintf('Search Result - %s', Yii::app()->params['title']);        $this->render('index');    }	/*	 * @author Lam Huynh	 */    public function actionHome() {		Yii::app()->theme = 'onehome';		Yii::app()->clientScript->coreScriptPosition = CClientScript::POS_BEGIN;		Yii::app()->clientScript->defaultScriptFilePosition = CClientScript::POS_END;		$this->layout = '/layouts/onehome/2-col-right';		$this->autosetSeoData('homepage');		$this->render('home');    }        public function actionCareer() {//        ProListingPhotos::FixWatermarkPhotoSmallSize(); // ANH DUNG TEST JAN 21, 2015//        Users::CronTenantEmploymentPassExpire();        $model = new ProOpportunity();				$this->autosetSeoData('career');        $this->render('career/opportunity', array('model'=>$model));    }        /**     * @Author: ANH DUNG Jan 19, 2015     * @Todo: to render page view job     * @Param: $slug     */    public function actionView_job($slug) {        try {            $model = ProOpportunity::GetBySlug($slug);            if(is_null($model))                throw new Exception('Invalid Request');            $this->pageTitle = 'View Job - '.Yii::app()->params['title'];            $this->render('career/View_job', array('model'=>$model));                } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }        public function actionResume() {        $model = new ProResume();        $flag = false;                $this->pageTitle = 'Submit Resume - '.Yii::app()->params['title'];		        if (isset($_POST['ProResume'])) {            $model->attributes = $_POST['ProResume'];            $model->file_resume = CUploadedFile::getInstance($model, 'file_resume');                        $model->validate();            if (!$model->hasErrors()) {                if($model->save()){                    //file_resule                    if (!is_null($model->file_resume)) {                        ProResume::save_upload_file_resume($model);                                                }                                        $flag = true;                    Yii::app()->user->setFlash('success', "Your Resume has been uploaded!");                                        //gui mail                    $aBody = array(                        '{NAME}' => $model->name,                        '{EMAIL}' => $model->email,                        '{PHONE}' => $model->phone,                         '{POSITION}' => $model->position,                         '{MESSAGE}' => nl2br(strip_tags($model->comment)),                    );                       $aSubject = array(                        '{POSITION}' => $model->position,                     );                     $sTo = Yii::app()->params['adminEmail'];                    CmsEmail::sendmail(MAIL_RESUME_USER, $aSubject, $aBody, $sTo);                    $sTo = $model->email;                    CmsEmail::sendmail(MAIL_RESUME_USER, $aSubject, $aBody, $sTo);                }            }        }        $this->render('career/resume', array('model'=>$model, 'flag'=>$flag));    }        public function actionListingDetail($draft=0) {		$model = $draft==1 ? LhListing::model()->findByAttributes(array('slug'=>$_GET['slug'])) :            LhListing::model()->findBySlug($_GET['slug']);;		if(is_null($model)){			throw new Exception('Invalid request');		}		$view = empty($m) ? 'listing_detail' : 'listing_map';		$model->view_count++;		$model->update('view_count');		// build breadscrumb		$searchParams = array('index');		$breadcrumbs = array();		// property type (child)		$searchParams['property_type_code[]'] = $model->property_type_1;		$breadcrumbs[$model->rPropertyType->name] = $searchParams;		// district		$searchParams['location[]'] = $model->location_id;		$breadcrumbs[$model->rLocationDistrict->name] = $searchParams;		// buidling name		if ($model->building_name) {			$searchParams['building'] = $model->building_name;			$breadcrumbs[$model->building_name] = $searchParams;		}		// listing type: sale/rent		$searchParams['listing_for'] = $model->listing_type == 1? 'for_rent' : 'for_sale';		$typeText = $model->listing_type == 1? "For Rent":"For Sale";		$breadcrumbs[$typeText] = $searchParams;		// property name		$breadcrumbs[] = $model->property_name_or_address;		$this->breadcrumbs = $breadcrumbs;		Yii::app()->theme = 'onehome';		$this->layout = '/layouts/onehome/1-col';		Yii::app()->clientScript->coreScriptPosition = CClientScript::POS_BEGIN;		Yii::app()->clientScript->defaultScriptFilePosition = CClientScript::POS_END;		$this->pageTitle = CmsFormatter::getListingNameDetail($model) . ' - ' . Yii::app()->params['title'];		$this->render($view, array('model' => $model));    }        public function actionAddressListing() {        $listing = Listing::model()->findBySlug($_GET['slug']);        $model = Listing::getAddressListing($listing->property_name_or_address);                $this->render('listing/address_listing', array('model' => $model, 'name' => $listing->property_name_or_address));    }        public function actionSalesperson_listing() {        $name = '';        $model = Listing::getSalespersonListing($name);        $this->render('listing/address_listing', array('model' => $model, 'name' => $name));    }    public function ajaxValidateRegister($model){        echo CActiveForm::validate($model);        Yii::app()->end();    }    /**     * <Jason>     * <pmhai90@gmail.com>     * Displays the login page of landlord user     */    public function actionAgentLogin($relogin = 0)    {        $this->pageTitle = 'Login Saleperson - '.Yii::app()->params['title'];        try {            if(isset(Yii::app()->user->role_id)){                switch(Yii::app()->user->role_id){                    case ROLE_REGISTER_MEMBER:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));                        break;                    case ROLE_TENANT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/tenant/property'));                        break;                    case ROLE_LANDLORD:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/landlord/property'));                        break;                    case ROLE_AGENT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/dashboard'));                        break;                }            }            $activationcode = Yii::app()->request->getQuery('verify_code');            // collect user input data            if(isset($activationcode))            {                $model = Users::model()->find('verify_code=:activationcode', array(':activationcode'=>$activationcode));                if($activationcode == $model->verify_code)                {                    $model->status=1;                    $model->save();                }            }            $model =  new LoginForm;            $model->scenario = 'login_admin';            $returnUrl='';            if(isset($_GET['returnUrl'])){                $returnUrl = $_GET['returnUrl'];            }            // collect user input data            if(isset($_POST['LoginForm']))            {                $model->attributes=$_POST['LoginForm'];                $model->nric = trim($model->nric);                $model->role_id = ROLE_AGENT;                // validate user input and redirect to the previous page if valid                //if($model->validate() && $model->login())                if($model->validate())                {                    if(!empty($returnUrl)){                        $this->redirect($returnUrl);                    }                    /* Change at yii 1.1.13:                     * we not use: if (strpos(Yii::app()->user->returnUrl,'/index.php')===false) to check returnUrl                     */                    if (strtolower(Yii::app()->user->returnUrl)!==strtolower(Yii::app()->baseUrl.'/'))                        $this->redirect(Yii::app()->user->returnUrl);                    $this->redirect(Yii::app()->createAbsoluteUrl('member/dashboard'));                }            }            // display the login form            $this->render('user_login/agent_login',array('model'=>$model));        } catch (Exception $exc) {            throw new CHttpException(404,'Invalid request. Please do not repeat this request again.');        }    }        /**     * <Jason>     * <pmhai90@gmail.com>     * Displays the login page of landlord user     */    public function actionTenantLogin($relogin = 0)    {        $this->pageTitle = 'Login Tenant - '.Yii::app()->params['title'];        try {            if(isset(Yii::app()->user->role_id)){                switch(Yii::app()->user->role_id){                    case ROLE_REGISTER_MEMBER:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));                        break;                    case ROLE_TENANT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/tenant/property'));                        break;                    case ROLE_LANDLORD:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/landlord/property'));                        break;                    case ROLE_AGENT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/dashboard'));                        break;                }            }            $activationcode = Yii::app()->request->getQuery('verify_code');            // collect user input data            if(isset($activationcode))            {                $model = Users::model()->find('verify_code=:activationcode', array(':activationcode'=>$activationcode));                if($activationcode == $model->verify_code)                {                    $model->status=1;                    $model->save();                }            }            $model =  new LoginForm;            $model->scenario = 'login_admin';            $returnUrl='';            if(isset($_GET['returnUrl'])){                $returnUrl = $_GET['returnUrl'];            }            // collect user input data            if(isset($_POST['LoginForm']))            {                $model->attributes=$_POST['LoginForm'];                $model->nric = trim($model->nric);                $model->role_id = ROLE_TENANT;                // validate user input and redirect to the previous page if valid                //if($model->validate() && $model->login())                if($model->validate())                {                    if(!empty($returnUrl)){                        $this->redirect($returnUrl);                    }                    /* Change at yii 1.1.13:                     * we not use: if (strpos(Yii::app()->user->returnUrl,'/index.php')===false) to check returnUrl                     */                    if (strtolower(Yii::app()->user->returnUrl)!==strtolower(Yii::app()->baseUrl.'/'))                        $this->redirect(Yii::app()->user->returnUrl);                    $this->redirectLoginTenant();                    $this->redirect(Yii::app()->createAbsoluteUrl('member/tenant/property'));                }            }            // display the login form            $this->render('user_login/tenant_login',array('model'=>$model));        } catch (Exception $exc) {            throw new CHttpException(404,'Invalid request. Please do not repeat this request again.');        }    }        /**     * @Author: ANH DUNG Oct 22, 2014     */    public function redirectLoginTenant(){        $model = ProTransactions::getLatestPropertiesTenancies();        if($model){            $this->redirect(Yii::app()->createAbsoluteUrl('member/tenant/tenancies_detail', array('transaction_id'=>$model->id)));        }    }        /**     * <Jason>     * <pmhai90@gmail.com>     * Displays the login page of landlord user     */    public function actionLandlordLogin()    {        $this->pageTitle = 'Login Lanlord - '.Yii::app()->params['title'];        try {            if(isset(Yii::app()->user->role_id)){                switch(Yii::app()->user->role_id){                    case ROLE_REGISTER_MEMBER:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));                        break;                    case ROLE_TENANT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/tenant/property'));                        break;                    case ROLE_LANDLORD:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/landlord/property'));                        break;                    case ROLE_AGENT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/dashboard'));                        break;                }            }            $activationcode = Yii::app()->request->getQuery('verify_code');            // collect user input data            if(isset($activationcode))            {                $model = Users::model()->find('verify_code=:activationcode', array(':activationcode'=>$activationcode));                if($activationcode == $model->verify_code)                {                    $model->status=1;                    $model->save();                }            }            $model =  new LoginForm;            $model->scenario = 'login_admin';            $returnUrl='';            if(isset($_GET['returnUrl'])){                $returnUrl = $_GET['returnUrl'];            }            // collect user input data            if(isset($_POST['LoginForm']))            {                $model->attributes=$_POST['LoginForm'];                $model->nric = trim($model->nric);                $model->role_id = ROLE_LANDLORD;                // validate user input and redirect to the previous page if valid                //if($model->validate() && $model->login())                if($model->validate())                {                    if(!empty($returnUrl)){                        $this->redirect($returnUrl);                    }                    /* Change at yii 1.1.13:                     * we not use: if (strpos(Yii::app()->user->returnUrl,'/index.php')===false) to check returnUrl                     */                    if (strtolower(Yii::app()->user->returnUrl)!==strtolower(Yii::app()->baseUrl.'/'))                        $this->redirect(Yii::app()->user->returnUrl);                    $this->redirectLoginLandlord();                    $this->redirect(Yii::app()->createAbsoluteUrl('member/landlord/property'));                }            }            // display the login form            $this->render('user_login/landlord_login',array('model'=>$model));        } catch (Exception $exc) {            throw new CHttpException(404,'Invalid request. Please do not repeat this request again.');        }    }        /**     * @Author: ANH DUNG Oct 22, 2014     */    public function redirectLoginLandlord(){        $model = ProTransactions::getLatestProperties();        if($model){            $this->redirect(Yii::app()->createAbsoluteUrl('member/landlord/tenancies_detail', array('transaction_id'=>$model->id)));        }    }        /**     * <Jason>     * <pmhai90@gmail.com>     * Displays the login page     */    public function actionLogin()    {        $this->pageTitle = 'User Login - '.Yii::app()->params['title'];        try {            if(isset(Yii::app()->user->role_id)){                switch(Yii::app()->user->role_id){                    case ROLE_REGISTER_MEMBER:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));                        break;                    case ROLE_TENANT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/tenant/property'));                        break;                    case ROLE_LANDLORD:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/landlord/property'));                        break;                    case ROLE_AGENT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/dashboard'));                        break;                }            }            $activationcode = Yii::app()->request->getQuery('verify_code');            // collect user input data            if(isset($activationcode))            {                $model = Users::model()->find('verify_code=:activationcode', array(':activationcode'=>$activationcode));                if($activationcode == $model->verify_code)                {                    $model->status=1;                    $model->save();                }            }            $model =  new LoginForm;            $model->scenario = 'login';            $returnUrl='';            if(isset($_GET['returnUrl'])){                $returnUrl = $_GET['returnUrl'];            }            // collect user input data            if(isset($_POST['LoginForm']))            {                $model->attributes=$_POST['LoginForm'];                $model->email = trim($model->email);                $model->role_id = ROLE_REGISTER_MEMBER;                // validate user input and redirect to the previous page if valid                //if($model->validate() && $model->login())                if($model->validate())                {                    if(!empty($returnUrl)){                        $this->redirect($returnUrl);                    }                    /* Change at yii 1.1.13:                     * we not use: if (strpos(Yii::app()->user->returnUrl,'/index.php')===false) to check returnUrl                     */                    if (strtolower(Yii::app()->user->returnUrl)!==strtolower(Yii::app()->baseUrl.'/'))                        $this->redirect(Yii::app()->user->returnUrl);                    $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));                }            }            // display the login form            $this->render('user_login/login',array('model'=>$model));        } catch (Exception $exc) {            throw new CHttpException(404,'Invalid request. Please do not repeat this request again.');        }    }    /**     * <Jason>     * <pmhai90@gmail.com>     * Logs out the current user and redirect to homepage.     */    public function actionLogout()    {        $role_id = Yii::app()->user->role_id;        MyFunctionCustom::logout();        switch ($role_id){            case ROLE_TENANT:                $this->redirect(Yii::app()->createAbsoluteUrl('site/tenantlogin'));                break;            case ROLE_AGENT:                $this->redirect(Yii::app()->createAbsoluteUrl('site/agentlogin'));                break;            case ROLE_LANDLORD:                $this->redirect(Yii::app()->createAbsoluteUrl('site/landlordlogin'));                break;            default :$this->redirect(Yii::app()->createAbsoluteUrl('site/login'));        }    }    /**     * @throws CHttpException     * <Jason>     * <pmhai90@gmail.com>     */    public function actionRegister() {        if(isset(Yii::app()->user->id)){            $this->redirect(Yii::app()->createAbsoluteUrl('/'));        }                $this->pageTitle = 'Register - '.Yii::app()->params['title'];        try {            //$this->checkValidateIp();            $model=new Users('register');            $model->area_code_id = DEFAULT_AREA_CODE;            // AJAX validation is needed            if(isset($_POST['ajax']) && $_POST['ajax']==='member-form')            {                $model->attributes = $_POST['Users'];                $this->ajaxValidateRegister($model);            }            // AJAX validation is needed            if(MyFunctionCustom::saveUserRegister($model)){                Yii::app ()->user->setFlash ( 'success', "Register successful !" );//              ANH DUNG CLOSE Feb 05, 2015  $this->redirect(Yii::app()->createAbsoluteUrl('page',array('slug'=>'thanks-you')));                $link_thanks = Yii::app()->createAbsoluteUrl('page/index', array('slug' => Pages::getSlugById(PAGE_REGISTER_THANK_YOU)));                $this->redirect($link_thanks);            }            $this->render('registeruser/register',array('model'=>$model));        } catch (Exception $exc) {            throw new CHttpException(404,'Invalid request. Please do not repeat this request again.');        }    }        public function actionViewProfile($id) {        try {            $this->pageTitle = 'View Profile - '.Yii::app()->params['title'];            $mUser = Users::model()->findByPk($id);            $this->render('viewprofile',                array('model'=>$mUser)            );        } catch (Exception $exc) {            echo $exc->getMessage();        }        }    /**     * <Jason>     * <To added item to shortlist>     */    public function actionAddShortlist(){        $response = array();        if(!Yii::app()->request->isPostRequest) return;        $response['message'] = 'Added fail. An error has occured.';        $response['code'] = false;        try        {            if($_POST)            {                $listing_id = $_POST['listing_id'];                $listingmodel = Listing::model()->findByPk($listing_id);                if(isset($listingmodel)){                    $shortlist = new ProUserShortList();                    $shortlist->listing_id = $listing_id;                    $shortlist->user_id = Yii::app()->user->id;                    $shortlist->created_date = date('Y-m-d H:i:s');                    if($shortlist->save()){                        $response['code'] = true;                        $response['message'] = 'Added shortlist successful.';                    }                }            }        }        catch(Exception $e)        {            Yii::log("Exception ".  print_r($e, true), 'error');            $response['message'] .= YII_DEBUG ? ' '.$e->getMessage() : null;        }        echo json_encode($response);        die;    }    public function actionSearchResult() {        try {            $this->pageTitle = 'Property Search Result - '.Yii::app()->params['title'];            $model = Listing::seachAll();            if(isset($_GET)) {                $model = Listing::seachAll($_GET);            }            $this->render('search/search_result',array('model'=>$model));        } catch (Exception $exc) {            throw new CHttpException(404, 'The requested page does not exist.');        }     }    /**    * @throws CHttpException    * <Jason>    * <pmhai90@gmail.com>    * <Agent forgot password>    */    public function actionagent_forgot_password()    {        $this->pageTitle = 'Forgot Password - '.Yii::app()->params['title'];        try {            if (Yii::app ()->user->id)            {                $role_id = Yii::app()->user->role_id;                switch ($role_id){                    case ROLE_REGISTER_MEMBER:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));                        break;                    case ROLE_TENANT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/tenant/property'));                        break;                    case ROLE_LANDLORD:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/landlord/property'));                        break;                    case ROLE_AGENT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/dashboard'));                        break;                }            }            else            {                $model = new ForgotPasswordForm ();                if (isset ( $_POST ['ForgotPasswordForm'] ))                {                    $model->attributes = $_POST ['ForgotPasswordForm'];                    if ($model->validate ())                    {                        //check Email                        $criteria = new CDbCriteria();                        $criteria->compare('t.email_not_login', $model->email);                        $criteria->compare('t.role_id', ROLE_AGENT);                                                $criteria->compare('t.application_id', FE);                        $mUser = Users::model ()->find($criteria);                        if (! $mUser)                        {                            $model->addError ( 'email', 'Email does not exist.' );                        }elseif ($mUser->status == STATUS_ACTIVE ) {                            $password = substr ( uniqid ( rand (), 1 ), 1, 10 );                            $pass_en = md5 ($password);                            $mUser->password_hash = $pass_en;                            $mUser->temp_password = $password;                            $mUser->update (array('password_hash', 'temp_password'));                                                        SendEmail::forgotPassword($mUser, $password, ROLE_AGENT);                            Yii::app ()->user->setFlash ( 'success', "An email with your new password has been sent to ".$mUser->email_not_login."                                                <br/>Please check your inbox.                                                <br/>If you do not receive the email, please add \"@properyinfo.sg\" to your mailbox safe list and check your Junk/Spam mailbox." );                            if(isset($_POST['back'])) {                                $this->redirect ( Yii::app()->createAbsoluteUrl('site/agentlogin'));                            }                        }                        else                        {                            $model->addError ( 'email', 'Email does not exist.' );                        }                    }                }                $this->render ( 'forgot_password/agent_forgot_password', array ('model' => $model) );            }        } catch (Exception $exc) {            throw new CHttpException(404,'Invalid request. Please do not repeat this request again.');        }    }        /**    * @throws CHttpException    * <Jason>    * <pmhai90@gmail.com>    * <Tenant forgot password>    */    public function actiontenant_forgot_password()    {        $this->pageTitle = 'Forgot Password - '.Yii::app()->params['title'];        try {            if (Yii::app ()->user->id)            {                $role_id = Yii::app()->user->role_id;                switch ($role_id){                    case ROLE_REGISTER_MEMBER:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));                        break;                    case ROLE_TENANT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/tenant/property'));                        break;                    case ROLE_LANDLORD:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/landlord/property'));                        break;                    case ROLE_AGENT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/dashboard'));                        break;                }            }            else            {                $model = new ForgotPasswordForm ();                if (isset ( $_POST ['ForgotPasswordForm'] ))                {                    $model->attributes = $_POST ['ForgotPasswordForm'];                    if ($model->validate ())                    {                        //check Email                        $criteria = new CDbCriteria();                        $criteria->compare('t.email_not_login', $model->email);                        $criteria->compare('t.role_id', ROLE_TENANT);                                                $criteria->compare('t.application_id', FE);                        $mUser = Users::model ()->find($criteria);                        if (! $mUser)                        {                            $model->addError ( 'email', 'Email does not exist.' );                        }elseif ($mUser->status == STATUS_ACTIVE ) {                            $password = substr ( uniqid ( rand (), 1 ), 1, 10 );                            $pass_en = md5 ($password);                            $mUser->password_hash = $pass_en;                            $mUser->temp_password = $password;                            $mUser->update (array('password_hash', 'temp_password'));                            SendEmail::forgotPassword($mUser, $password, ROLE_TENANT);                            Yii::app ()->user->setFlash ( 'success', "An email with your new password has been sent to ".$mUser->email_not_login."                                                <br/>Please check your inbox.                                                <br/>If you do not receive the email, please add \"@properyinfo.sg\" to your mailbox safe list and check your Junk/Spam mailbox." );                            if(isset($_POST['back'])) {                                $this->redirect ( Yii::app()->createAbsoluteUrl('site/tenantlogin'));                            }                        }                        else                        {                            $model->addError ( 'email', 'Email does not exist.' );                        }                    }                }                $this->render ( 'forgot_password/tenant_forgot_password', array ('model' => $model) );            }        } catch (Exception $exc) {            throw new CHttpException(404,'Invalid request. Please do not repeat this request again.');        }    }        /**    * @throws CHttpException    * <Jason>    * <pmhai90@gmail.com>    * <Landlord forgot password>    */    public function actionlandlord_forgot_password()    {        $this->pageTitle = 'Forgot Password - '.Yii::app()->params['title'];        try {            if (Yii::app ()->user->id)            {                $role_id = Yii::app()->user->role_id;                switch ($role_id){                    case ROLE_REGISTER_MEMBER:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));                        break;                    case ROLE_TENANT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/tenant/property'));                        break;                    case ROLE_LANDLORD:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/landlord/property'));                        break;                    case ROLE_AGENT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/dashboard'));                        break;                }            }            else            {                $model = new ForgotPasswordForm ();                if (isset ( $_POST ['ForgotPasswordForm'] ))                {                    $model->attributes = $_POST ['ForgotPasswordForm'];                    if ($model->validate ())                    {                        //check Email                        $criteria = new CDbCriteria();                        $criteria->compare('t.email_not_login', $model->email);                        $criteria->compare('t.role_id', ROLE_LANDLORD);                                                $criteria->compare('t.application_id', FE);                        $mUser = Users::model ()->find($criteria);                        if (! $mUser)                        {                            $model->addError ( 'email', 'Email does not exist.' );                        }elseif ($mUser->status == STATUS_ACTIVE ) {                            $password = substr ( uniqid ( rand (), 1 ), 1, 10 );                            $pass_en = md5 ($password);                            $mUser->password_hash = $pass_en;                            $mUser->temp_password = $password;                            $mUser->update (array('password_hash', 'temp_password'));                            SendEmail::forgotPassword($mUser, $password, ROLE_LANDLORD);                            Yii::app ()->user->setFlash ( 'success', "An email with your new password has been sent to ".$mUser->email_not_login."                                                <br/>Please check your inbox.                                                <br/>If you do not receive the email, please add \"@properyinfo.sg\" to your mailbox safe list and check your Junk/Spam mailbox." );                            if(isset($_POST['back'])) {                                $this->redirect ( Yii::app()->createAbsoluteUrl('site/landlordlogin'));                            }                        }                        else                        {                            $model->addError ( 'email', 'Email does not exist.' );                        }                    }                }                $this->render ( 'forgot_password/landlord_forgot_password', array ('model' => $model) );            }        } catch (Exception $exc) {            throw new CHttpException(404,'Invalid request. Please do not repeat this request again.');        }    }        /**     * @throws CHttpException     * <Jason>     * <pmhai90@gmail.com>     */    public function actionforgot_password()    {        $this->pageTitle = 'Forgot Password - '.Yii::app()->params['title'];        try {            if (Yii::app ()->user->id)            {                $role_id = Yii::app()->user->role_id;                switch ($role_id){                    case ROLE_REGISTER_MEMBER:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));                        break;                    case ROLE_TENANT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/tenant/property'));                        break;                    case ROLE_LANDLORD:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/landlord/property'));                        break;                    case ROLE_AGENT:                        $this->redirect(Yii::app()->createAbsoluteUrl('member/dashboard'));                        break;                }            }            else            {                $model = new ForgotPasswordForm ();                if (isset ( $_POST ['ForgotPasswordForm'] ))                {                    $model->attributes = $_POST ['ForgotPasswordForm'];                    if ($model->validate ())                    {                        //check Email                        $criteria = new CDbCriteria();                        $criteria->compare('t.email', $model->email);                        $criteria->compare('t.role_id', ROLE_REGISTER_MEMBER);                        $criteria->compare('t.application_id', FE);                        $mUser = Users::model ()->find($criteria);                        if (! $mUser)                        {                            $model->addError ( 'email', 'Email does not exist.' );                        }elseif ($mUser->status == STATUS_ACTIVE ) {                            $password = substr ( uniqid ( rand (), 1 ), 1, 10 );                            $pass_en = md5 ($password);                            $mUser->password_hash = $pass_en;                            $mUser->temp_password = $password;                            $mUser->update (array('password_hash', 'temp_password'));                            SendEmail::forgotPassword($mUser, $password, ROLE_REGISTER_MEMBER);                            Yii::app ()->user->setFlash ( 'success', "An email with your new password has been sent to ".$mUser->email."                                                <br/>Please check your inbox.                                                <br/>If you do not receive the email, please add \"@properyinfo.sg\" to your mailbox safe list and check your Junk/Spam mailbox." );                            if(isset($_POST['back'])) {                                $this->redirect ( Yii::app()->createAbsoluteUrl('site/login'));                            }                        }                        else                        {                            $model->addError ( 'email', 'Email does not exist.' );                        }                    }                }                $this->render ( 'forgot_password/forgot_password', array ('model' => $model) );            }        } catch (Exception $exc) {            throw new CHttpException(404,'Invalid request. Please do not repeat this request again.');        }    }    public function actionError() {        if ($error = Yii::app()->errorHandler->error) {            if (Yii::app()->request->isAjaxRequest)                echo $error['message'];            else                $this->render('error', $error);        }    }    //HTram    public function actionContact() {		$this->pageTitle = 'Contact Us - '.Yii::app()->params['title'] ;		$model = new ContactForm();		if (isset($_POST['ContactForm'])) {			$model->attributes = $_POST['ContactForm'];			$model->name = $_POST['ContactForm']['name'];			$model->position = $_POST['ContactForm']['position'];			$model->company = $_POST['ContactForm']['company'];			$model->message = $_POST['ContactForm']['message'];			$model->email= trim($model->email);			if ($model->validate()) {				$model->message = nl2br($model->message);				$enquiry_type = $_POST['ContactForm']['enquiry_type'];				$model->enquiry_type = ContactForm::$enqueryType[$enquiry_type];				$email_to = Yii::app()->params['adminEmail'];				//save data 				$contactus = New  ProContactUs();				$contactus ->attributes = $_POST['ContactForm'];				$contactus ->save();				SendEmail::sendMailContact($model,$email_to);				Yii::app()->user->setFlash('success', 'Your message has been sent!<br/> Thank you for contacting us. We greatly value any feedback provided to us.<br/> If required, we will get back to you shortly. ');				$this->redirect(array('contactThankyou'));			}		}				Yii::app()->theme = 'onehome';		Yii::app()->clientScript->coreScriptPosition = CClientScript::POS_BEGIN;		Yii::app()->clientScript->defaultScriptFilePosition = CClientScript::POS_END;		$this->layout = '/layouts/onehome/1-col';		$this->render('contact_us',array('model'=>$model));	}	public function actionContactThankyou() {        $this->pageTitle = 'Thank you - '.Yii::app()->params['title'] ;		$model = new ContactForm();		if (isset($_POST['ContactForm'])) {		   $model->attributes = $_POST['ContactForm'];		   $model->name = $_POST['ContactForm']['name'];		   $model->position = $_POST['ContactForm']['position'];		   $model->company = $_POST['ContactForm']['company'];		   $model->message = $_POST['ContactForm']['message'];		   $model->email= trim($model->email);		   if ($model->validate()) {			   $model->message = nl2br($model->message);				$enquiry_type = $_POST['ContactForm']['enquiry_type'];			   $model->enquiry_type = ContactForm::$enqueryType[$enquiry_type];			   $email_to = Yii::app()->params['adminEmail'];			   //save data 			   $contactus = New  ProContactUs();			   $contactus ->attributes = $_POST['ContactForm'];			   $contactus ->save();			   SendEmail::sendMailContact($model,$email_to);			   Yii::app()->user->setFlash('success', 'Your message has been sent!<br/>Thank you for contacting us. We greatly value any feedback provided to us.<br/>If required, we will get back to you shortly.');			   $this->redirect(array('contactThankyou'));		   }		}        		Yii::app()->theme = 'onehome';		Yii::app()->clientScript->coreScriptPosition = CClientScript::POS_BEGIN;		Yii::app()->clientScript->defaultScriptFilePosition = CClientScript::POS_END;		$this->layout = '/layouts/onehome/1-col';		$this->render('contact_us',array('model'=>$model));//		$this->render('contact-thankyou',array('model'=>$model));			}	     public function actionThankyou(){    	$this->pageTitle = 'Register successful ' . ' - ' .Yii::app()->params['title'];        $this->render('thankyou');    }    //HTram    public function actionGuestSubscriber()    {        $validator = new CEmailValidator;        $model = new Subscriber();        $error = array();        if (isset($_POST['ajax']) && $_POST['ajax'] == 'ajax') {            $model = new Subscriber();            $model->email = $_POST['email'];            $model->validate();            $error = $model->getErrors('email');            if (count($model->getErrors('email')) > 0)                $json = CJavaScript::jsonEncode(array('success' => false, 'msg' => $error[0]));            else {                $json = CJavaScript::jsonEncode(array('success' => true));                if (!empty($_POST['email'])) {                    // insert to db                    $model = new Subscriber();                   // $model->name = $_POST['email'];                    $model->email = $_POST['email'];                    $model->subscriber_group_id=2;                    $model->save();                }            }            echo $json;        }    }     //HTram     public function actionTestimonial(){         $this->pageTitle = 'Testimonials - '.Yii::app()->params['title'] ;         $model = ProTestimonial::model()->getTestimonial();         $this->render('testimonial/testimonial',array('data'=>$model));     }    //Kvan    public function actionSiteMap(){        $menuFe = new ShowMenu();        $listMenu = $menuFe->showMenu_siteMap();        $this->render('siteMap',array(            'data'=>$listMenu        ));    }    //HTram    public function actionUnsubscribe($id, $code) {        $model = Subscriber::model()->findByPk($id);        if(is_null($model))            throw new CHttpException('Invalid request');        $email = $model->email;        if (md5($model->id . $model->email) == $code) {            $model->delete();            $this->render('unsubscribe', array('email' => $email));        }        else            throw new CHttpException('Invalid request');    }    public function actionDownload($file_id,$class,$field){        try {            $ModelName = call_user_func(array($class,'model'));            $model = $ModelName->findByPk((int)$file_id);            if (is_null($model))                throw new Exception('Not found.');            ActiveRecord::forceDownload($model,$field);        } catch (Exception $exc) {            throw new CHttpException(403, $exc->getMessage());        }           }           public function actionTest(){        $this->layout=false;        $this->render('test');    }        public function actionLoadmapdetail($listing_id,$size='small_map'){        $this->layout=false;        Yii::app()->clientScript->registerCoreScript('jquery');        $model = Listing::model()->findByPk($listing_id);                $this->render('load_map_detail',array('model'=>$model,'size'=>$size));    }            /********* Mar 04, 2015 ANH DUNG FOR IMPORT NEW DATA Postal Code *********/    /********* STEP TO UPDATE THIS 6-Digit Postal Code  ********     *  1. Run insert from action demo2/site/importApi     *  2. Run this function from Cron console: ApiPostcode::HandleUpdateLonLatTableBuilding();     *  vì ở trên host bị limit timeout cho 1 connection, ở local thì chạy trên browser được     *  ở local sau khi chạy thì ra con số này: done in: 5333 Second <=> 88.883 Minutes     *     ******** STEP TO UPDATE THIS 6-Digit Postal Code  *********/        /** http://www.streetdirectory.com/sg/1-suites/1-lorong-20-geylang-398721/100869_51869.html     * @Author: ANH DUNG Mar 04, 2015     * @Todo: 6-Digit Postal Code Subscription     * The latest update of the database is attached please.        The data have been updated as at 10 Feb 2015.     * @Link: verzview.com/verzpropertyinfo/demo2/site/importApi     * @cron: s:39:" done in: 285  Second  <=> 4.75 Minutes";     * s:39:" done in: 273  Second  <=> 4.55 Minutes";     * s:48:" done in: 235  Second  <=> 3.91666666667 Minutes";     */    public function actionImportApi() {//        Yii::app()->setting->setDbItem('rss', 0); // for run cron NewsletterCommand//        echo Yii::app()->setting->getItem('rss');die;//        phpinfo();        echo "need close this line to run. Please read careful step above";die;        $from = time();        set_time_limit(72000);//        $sql = "insert into {{_api_postcode}} ( postal_code ) values ( '019191K31 MAR0043MAR036999999' ),( '019191K31 MAR0043MAR036' ) ";//        Yii::app()->db->createCommand($sql)->execute();die;        $root = ROOT.'/api'; // ApiAddress, ApiBuilding, ApiPostcode, ApiStreets, ApiWalkup        $aInfoImport = array(            array(                'ClassName'=>'ApiAddress',                'FieldName'=>'address',                'file_name'=>'ADDRESS.TXT',            ),            array(                'ClassName'=>'ApiBuilding',                'FieldName'=>'building',                'file_name'=>'BUILDING.TXT',            ),            array(                'ClassName'=>'ApiPostcode',                'FieldName'=>'postal_code',                'file_name'=>'POSTCODE.TXT',            ),            array(                'ClassName'=>'ApiStreets',                'FieldName'=>'streets',                'file_name'=>'STREETS.TXT',            ),            array(                'ClassName'=>'ApiWalkup',                'FieldName'=>'walkup',                'file_name'=>'WALKUP.TXT',            ),        ); // array name file to import        foreach($aInfoImport as $item){            $importFile = $root . "/". strtolower($item['file_name']) ;            if (file_exists($importFile)){                $aExists = array();                $aNew = array();                $aData = file($importFile, FILE_IGNORE_NEW_LINES);                $this->HandleImport($item['ClassName'], $item['FieldName'], $aData, $aExists, $aNew);                $this->InsertNewRecord($item['ClassName'], $item['FieldName'], $aNew);            }        }//        ApiPostcode::HandleUpdateLonLatTableBuilding(); // only run from cron job        $to = time();        $second = $to-$from;        echo ' done in: '.($second).'  Second  <=> '.($second/60).' Minutes';die;    }        /**     * @Author: ANH DUNG Mar 19, 2015     * @Todo: Handle Import file, belong to actionImportApi     * @Param: $ClassName name of model     * @Param: $field_name field in db     * @Param: $aData array data from file     */    public function HandleImport($ClassName, $FieldName, $aData, &$aExists, &$aNew){        foreach( $aData as $row ){            $aNew[] = MyFormat::escapeValues($row);        } // thêm mới toàn bộ        echo "<hr>$ClassName Data: ".count($aData)." - Exists: ".count($aExists)." - New: ".count($aNew);//        echo "<hr>$ClassName Data: ".count($aData)." - Exists: ".count($aExists)." - New: ".count($aNew)." - Detail: ".implode(",",$aNew);    }        /**     * @Author: ANH DUNG Mar 04, 2015     * @Todo: insert new record to db     * @Param: $ClassName name of model     * @Param: $field_name field in db     * @Param: $aNew array data to insert new     */    public function InsertNewRecord($ClassName, $FieldName, $aNew) {        $model_ = call_user_func(array($ClassName, 'model'));        $tableName = $model_->tableName();        Yii::app()->db->createCommand("truncate table $tableName")->query();//        sleep(1);        $aRowInsert=array();        foreach ($aNew as $key=>$item) {            $aRowInsert[]="( '$item' )";        }                $sql = "insert into $tableName (                $FieldName            ) values ".implode(',', $aRowInsert);        if(count($aRowInsert)>0){//            echo "<br> SQL: $sql <br>";            Yii::app()->db->createCommand($sql)->execute();        }    }            /**     * @Author: ANH DUNG Mar 19, 2015     * @Todo: something     * @Param: $model 398721     */    public function actionTestApi() {        $postal_code='398721';        $postal_code='428802';        $url = "http://www.streetdirectory.com/api/?mode=search&&output=json&profile=sd_auto&country=sg&q=".trim($postal_code);        $output = MyFormat::curl_get_contents($url);        $output = json_decode($output);         foreach($output as $key=>$item){            echo "$key -- ";        }        echo '<pre>';        print_r($output);        echo '<pre>';        exit;            }        /********* Mar 04, 2015 ANH DUNG FOR IMPORT NEW DATA Postal Code *********/	/*	 * @author Lam Huynh	 * Remove resized image	 */	public function actionRri() {		$c = new CDbCriteria();		$c->order = 'date_listed DESC';		$c->limit= 6;				$removeDir = array();		foreach(Listing::model()->findAll($c) as $listing) {			$base = Yii::getPathOfAlias('webroot') . '/upload/listing/' . $listing->id;			if ( !is_dir($base) ) continue;						$iterator = new RecursiveIteratorIterator(				new RecursiveDirectoryIterator($base), 				RecursiveIteratorIterator::SELF_FIRST);			foreach($iterator as $file) {				if($file->isDir()) {					$dir = $file->getRealpath();					if ( preg_match('/\\d+x\\d+$/', $dir) ) 						$removeDir[] = $dir;				}			}					}		foreach($removeDir as $dir) {//			FileHelper::recursiveRemoveDirectory($dir);		}		var_dump($removeDir);		die;	}		/*	 * Sync listing from propertyguru	 * @author Lam Huynh	 */	public function actionSync() {		Yii::app()->theme = 'onehome';		Yii::app()->clientScript->coreScriptPosition = CClientScript::POS_BEGIN;		Yii::app()->clientScript->defaultScriptFilePosition = CClientScript::POS_END;		$this->layout = '/layouts/onehome/1-col';		$this->pageTitle = 'Sync Property - '.Yii::app()->params['title'];				if (Yii::app()->request->isPostRequest) {			$url = $_POST['url'];			$data = ListingSynchronizer::getListingData($url);			if (!$data) {				Yii::app()->user->setFlash('error', 'Url invalid or the remote system blocked your request. 					Please try again after few minutes.');				$this->redirect(array('sync'));			}			$res = ListingSynchronizer::syncListing($data);			switch ($res) {				case 1:					Yii::app()->user->setFlash('success', 'Property has been saved to system.');					break;				case -1:					Yii::app()->user->setFlash('error', 'This Property does not belong to OneHome.');					break;				case -2:					Yii::app()->user->setFlash('error', 'This Property already existed in our system.');					break;			}			$this->redirect(array('sync'));		}		$this->render('sync');	}		/*	 * Our Services page	 * @author Lam Huynh	 */	public function actionOurServices($slug='') {		try {			if ($slug) {				$model = OurService::findBySlug($slug);			} else {				$categories = OurService::getMainCategories();				$model = $categories[0];			}			if (!$model) {				throw new CHttpException(404, 'The requested page does not exist.');			}						if ($model->childs) {				$this->redirect(Yii::app()->createAbsoluteUrl('site/ourServices', array(					'slug'=>$model->childs[0]->slug				)));			}						Yii::app()->session['last-service-id'] = $model->id;			Yii::app()->theme = 'onehome';			Yii::app()->clientScript->coreScriptPosition = CClientScript::POS_BEGIN;			Yii::app()->clientScript->defaultScriptFilePosition = CClientScript::POS_END;			$this->layout = '/layouts/onehome/3-col';			$this->pageTitle = 'Our Services - '.Yii::app()->params['title'];			$this->render('our-services', array(				'model' => $model			));		} catch (Exception $ex) {			throw $ex;		}	}	/*	 * Forum landing page	 * @author Lam Huynh	 */	public function actionOurForum() {		$forumUrl = trim(Yii::app()->params['forumUrl'], '/');		$topics = json_decode(Helper::getHtml($forumUrl.'/api.php?m=get-topics'), true);		$forums = json_decode(Helper::getHtml($forumUrl.'/api.php?m=get-forums'), true);				Yii::app()->theme = 'onehome';		Yii::app()->clientScript->coreScriptPosition = CClientScript::POS_BEGIN;		Yii::app()->clientScript->defaultScriptFilePosition = CClientScript::POS_END;		$this->layout = '/layouts/onehome/1-col';		$this->pageTitle = 'Discussion Forum - '.Yii::app()->params['title'];		$this->render('forum', array(			'topics' => $topics,			'forums' => $forums,		));	}		/*	 * Callback page for facebook login	 * @author Lam Huynh	 */	public function actionFbLoginCallback() {		$fb = new Facebook\Facebook(array(			'app_id' => Yii::app()->params['fb_app_id'],			'app_secret' => Yii::app()->params['fb_app_serect'],			'default_graph_version' => 'v2.2',		));		$helper = $fb->getRedirectLoginHelper();		try {			$accessToken = $helper->getAccessToken();		} catch(Facebook\Exceptions\FacebookResponseException $e) {			// When Graph returns an error			throw new CHttpException('400', 'Graph returned an error: ' . $e->getMessage());		} catch(Facebook\Exceptions\FacebookSDKException $e) {			// When validation fails or other local issues			throw new CHttpException('400', 'Facebook SDK returned an error: ' . $e->getMessage());		}		if (!isset($accessToken)) {			throw new CHttpException('400', 'Facebook Access Token is empty');		}				$response = $fb->get('/me?fields=id,name,email', $accessToken);		$data = $response->getDecodedBody();		$u = Users::model()->find(array(			'condition'=>"email=:email OR (oauth_provider='facebook' AND oauth_uid=:fid)", 			'params'=>array(				':email'=>$data['email'],				':fid'=>$data['id'],			)		));		if (!$u) {			$u = new Users('facebook_register');			$u->oauth_provider = 'facebook';			$u->oauth_uid = $data['id'];			$u->email = $data['email'];			$u->username = $data['email'];			$u->username = $data['email'];			list($u->first_name, $u->last_name) = explode(' ', $data['name']);			$u->created_date=date('Y-m-d H:i:s');			$u->last_logged_in=date('Y-m-d H:i:s');			$u->role_id=ROLE_REGISTER_MEMBER;			$u->status=1;			$u->application_id = FE;			$u->login_attemp = 0;			if (!$u->save()) {				throw new CHttpException('500', 'Can not register new user');			}		}		// in case user is already register with this email		if (!$u->oauth_uid) {			$u->oauth_provider = 'facebook';				$u->oauth_uid = $data['id'];			$u->save();		}		$identity = new FacebookIdentity($data['id']);		$identity->authenticate();		switch($identity->errorCode)		{			case FacebookIdentity::ERROR_NONE:				$duration = 3600*24*30;				Yii::app()->user->login($identity,$duration);				break;			default:				throw new CHttpException('400', 'User not exist in the system');				break;		}		$this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));	}	}