<?php/** Mar 28, 2014 * @author ANH DUNG * use for some action ajax at module member */class AjaxController extends Controller {    public $layout = 'ajax';        /**     * @Author: ANH DUNG Jul 08, 2014     * @Todo: check login user     */    protected function beforeAction($action) {        $this->CheckLogin();        return parent::beforeAction($action);    }        /**     * <Jason>     * <To added a document into gridview in tenancy details page>     */        public function actionUploadDocument() {        try {            $model = new ProTransactionsPropertyDocument('upload');            if(isset($_POST['ProTransactionsPropertyDocument']))            {                $model->attributes=$_POST['ProTransactionsPropertyDocument'];                $model->transactions_id = $_GET['transaction_id'];                $model->user_id = Yii::app()->user->id;                $model->file_name  = CUploadedFile::getInstance($model,'file_name');                if($model->validate()){                    if(!$model->getErrors()){                        if($model->save()){                            if(!is_null($model->file_name)){                                $model->file_name = ProTransactionsPropertyDocument::saveFile($model, 'file_name', ProTransactionsPropertyDocument::$folderUpload, $model->order_no) ;                                $model->update(array('file_name'));                            }                            Yii::app()->user->setFlash('success', "Your report defect has been insert successfully!");                            $model->title = '';                            die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#document-grid");   </script>');                        }                    }                }            }            $this->render('member/upload', array('model'=>$model));                    } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }        /**     * <Jason>     * <To added a report into gridview in tenancy details page>     */        public function actionAddReport() {        try {            $aRoleRestrict = array(ROLE_LANDLORD);            if(in_array(Yii::app()->user->role_id, $aRoleRestrict)){                die;            }                        $model = new ProReportDefect('create');            if(isset($_POST['ProReportDefect']))            {                $model->attributes=$_POST['ProReportDefect'];                $model->transaction_id = $_GET['transaction_id'];                $model->created_date = date('Y-m-d H:i:s');                $model->photo  = CUploadedFile::getInstance($model,'photo');                $model->status  = 0;                $model->user_id  = Yii::app()->user->id;                if($model->validate()){                    if(!$model->getErrors()){                        if($model->save()){                            ProReportDefect::save_photo($model);                            Yii::app()->user->setFlash('success', "Your report defect has been insert successfully!");                            $model->description = '';                            die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#defect-grid");   </script>');                        }                    }                }            }            $this->render('member/addreport', array('model'=>$model));                    } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }                /**     * @Author: ANH DUNG Jul 08, 2014     * @Todo: kiểm tra login với 1 số action cần login, điều này là cần thiết     * vì có 1 số action trong BE sử dụng ở đây, sẽ không kiểm tra login dc, cho nên phải cho qua     */        public function CheckLogin(){        $aActionCheck = array(            'AddReport','AddAirconService','UpdateAirconService', 'DeleteAirconService', 'AgentAddVendor', 'AgentUpdateVendor', 'AgentAddLandlord',            'AgentUpdateLandlord','AgentAddTenant','AgentUpdateTenant', 'TenantFormView', 'AgentAddPurchaser', 'AgentUpdatePurchaser','AgentAddExternalCoBroke',//            'AgentUpdateExternalCoBroke', 'AgentAddInternalCoBroke', 'Search_user','SearchListing', 'SelectListing', 'SearchLandlordTenant','SearchAgent',            'AgentUpdateExternalCoBroke', 'AgentAddInternalCoBroke', 'Search_user', 'SelectListing', 'SearchLandlordTenant','SearchAgent',        );        $action = Yii::app()->controller->action->id;                if(!isset(Yii::app()->user->id) && in_array($action, $aActionCheck)){            throw new CHttpException(404, 'The requested page does not exist.');        }    }                /**     * @Author: ANH DUNG Jul 08, 2014     * @Todo: load model loadModelByClass     * @Param: ($id, $ClassName)     * @Return: model     */    public function loadModelByClass($id, $ClassName) {        try {            $model_ = call_user_func(array($ClassName, 'model'));            $model = $model_->findByPk($id);            if ($model === null) {                Yii::log("The requested page does not exist.");                throw new CHttpException(404, 'The requested page does not exist.');            }            return $model;        } catch (Exception $e) {            Yii::log("Exception " . print_r($e, true), 'error');            throw new CHttpException("Exception " . print_r($e, true));        }    }        /**     * @Author: ANH DUNG Jul 08, 2014     * @Todo: add addAirconService     */        public function actionUpdateAirconService($id) {        try {            $aRoleRestrict = array(ROLE_TENANT, ROLE_LANDLORD);            if(!in_array(Yii::app()->user->role_id, $aRoleRestrict)){                die;            }            $model = $this->loadModelByClass($id, 'ProAirconService');            $model->scenario = "";            if($model->upload_service_documents == ''){                $model->scenario = 'UploadServiceDocument';            }//            if($model->user_id != Yii::app()->user->id){//                die;//            }            if(isset($_POST['ProAirconService']))            {                $model->attributes=$_POST['ProAirconService'];                $model->upload_service_documents  = CUploadedFile::getInstance($model,'upload_service_documents');                $model->validate();                if(!$model->hasErrors()){                    ProAirconService::save_photo($model);                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#aircon_service_grid");   </script>');                }            }            $this->render('member/UpdateAirconService', array('model'=>$model));                    } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }            /**     * @Author: ANH DUNG Jul 08, 2014     * @Todo: add addAirconService     */        public function actionAddAirconService() {        try {            $aRoleRestrict = array(ROLE_LANDLORD);            if(in_array(Yii::app()->user->role_id, $aRoleRestrict)){                die;            }            $model = new ProAirconService('create');            if(isset($_POST['ProAirconService']))            {                $model->attributes=$_POST['ProAirconService'];                $model->transaction_id = $_GET['transaction_id'];                $model->created_date = date('Y-m-d H:i:s');                $model->upload_service_documents  = CUploadedFile::getInstance($model,'upload_service_documents');                $model->user_id  = Yii::app()->user->id;                $model->validate();                if(!$model->hasErrors()){                    $model->save();                    ProAirconService::save_photo($model);                    Yii::app()->user->setFlash('success', "Your report defect has been insert successfully!");                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#aircon_service_grid");   </script>');                }            }            $this->render('member/AddAirconService', array('model'=>$model));                    } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }            }            public function actionDeleteAirconService($id) {        try {            $model = ProAirconService::model()->findByPk($id);            if($model && $model->user_id == Yii::app()->user->id){                $model->delete();            }        } catch (Exception $exc) {            echo $exc->getMessage();        }        die;    }            public function actionAgentAddVendor() {        try {            $model = new ProTransactionsVendorPurchaserDetail('AgentAddVendor');            $model->transactions_id = $_GET['transactions_id'];            if (isset($_POST['ProTransactionsVendorPurchaserDetail'])) {                $model->attributes = $_POST['ProTransactionsVendorPurchaserDetail'];                $model->validate();                if (!$model->hasErrors()) {                    $mUser = Users::saveUserVendorPurchaser($model, ROLE_VENDOR);                    $model->user_id = $mUser->id;                    $model->type = Users::USER_VENDOR;                    $model->save();                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#vendor-grid");   </script>');                }            }            $this->render('CreateTransaction/AgentAddVendor', array('model' => $model));        } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }    public function actionAgentUpdateVendor($id) {        try {            $model = $this->loadModelVendorPurchaserDetail($id);            $model = ProTransactionsVendorPurchaserDetail::OverideModel($model);            $model->scenario = 'AgentUpdateVendor';            if (isset($_POST['ProTransactionsVendorPurchaserDetail'])) {                $model->attributes = $_POST['ProTransactionsVendorPurchaserDetail'];                $model->validate();                if (!$model->hasErrors()) {                    $model->update();                    Users::UpdateUserVendorPurchaserOnly($model);                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#vendor-grid");   </script>');                }            }            $this->render('CreateTransaction/AgentUpdateVendor', array('model' => $model));        } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }    /** http://localhost/propertyinfo-dev/propertyinfo/member/member_profile/createTransaction/id/1/type/1/listing_id/2     * @Author: ANH DUNG Apr 14, 2014     * @Todo: for rent - create Landlord’s Details       */    public function actionAgentAddLandlord() {//        try {            $model = new ProTransactionsVendorPurchaserDetail('AgentAddLandlordFromTenancy');            if( isset($_GET['from_transactions']) ){                $model->scenario = 'AgentAddLandlord';            }            if( isset($_GET['add_property']) && $_GET['add_property'] == ProTransactions::ADD_UNLISTED ){                $model->scenario = 'AgentAddLandlordUnlisted';            }            $model->transactions_id = $_GET['transactions_id'];            if (isset($_POST['ProTransactionsVendorPurchaserDetail'])) {                $model->attributes = $_POST['ProTransactionsVendorPurchaserDetail'];                $model->validate();//                Users::validateEmailLandlordTenant($model);                if (!$model->hasErrors()) {                    $model->type = Users::USER_LANDLORD;//                    $session=Yii::app()->session;                    if(empty($model->user_id)){                        $mUser = Users::saveUserVendorPurchaser($model, ROLE_LANDLORD);                        $model->user_id = $mUser->id;                        $model->is_new_user = 1;                    }                    $model->save();                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#landlord-grid");</script>');                }            }            $this->render('CreateTransaction/AgentAddLandlord', array('model' => $model));//        } catch (Exception $exc) {////            throw new CHttpException(404, $exc->getMessage());////        }    }    public function actionAgentUpdateLandlord($id) {        try {            $model = $this->loadModelVendorPurchaserDetail($id);            $model->scenario = 'AgentUpdateLandlordFromTenancy';            if( isset($_GET['from_transactions']) ){                $model->scenario = 'AgentUpdateLandlord';            }            if( isset($_GET['add_property']) && $_GET['add_property'] == ProTransactions::ADD_UNLISTED ){                $model->scenario = 'AgentUpdateLandlordUnlisted';            }            if (isset($_POST['ProTransactionsVendorPurchaserDetail'])) {                $model->attributes = $_POST['ProTransactionsVendorPurchaserDetail'];                $model->validate();                if (!$model->hasErrors()) {                    $model->update();                    Users::UpdateUserVendorPurchaserOnly($model);                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#landlord-grid");</script>');                }            }            $this->render('CreateTransaction/AgentUpdateLandlord', array('model' => $model));        } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }    /** http://localhost/propertyinfo-dev/propertyinfo/member/member_profile/createTransaction/id/1/type/1/listing_id/2     * @Author: ANH DUNG Apr 14, 2014     * @Todo: for rent - create Tenant'’s Details       */    public function actionAgentAddTenant() {        try {            $model = new ProTransactionsVendorPurchaserDetail('AgentAddTenantFromTenancy');            if( isset($_GET['from_transactions']) ){                $model->scenario = 'AgentAddTenant';            }            if( isset($_GET['add_property']) && $_GET['add_property'] == ProTransactions::ADD_UNLISTED ){                $model->scenario = 'AgentAddTenantUnlisted';            }                        $model->transactions_id = $_GET['transactions_id'];            if (isset($_POST['ProTransactionsVendorPurchaserDetail'])) {                $model->attributes = $_POST['ProTransactionsVendorPurchaserDetail'];                $model->scanned_employment_pass = CUploadedFile::getInstance($model, 'scanned_employment_pass');                $model->scanned_passport = CUploadedFile::getInstance($model, 'scanned_passport');                if(!empty($model->user_id))                    $model->scenario = 'AgentAddTenantExitUid';                $model->validate();                if (!$model->hasErrors()) {                    $oldUser = false;                    if(!empty($model->user_id)){                        $oldUser = true;                    }                    ProTransactionsVendorPurchaserDetail::saveOneTenant($model, 0);                    if($oldUser){                         // không xử lý cho edit tenant nữa, chỉ lưu user_id của tenant thôi,                          // nên không cần phải copy file qua nữa//                        $mUser = Users::model()->findByPk($model->user_id);//                        Users::copyTwoFileFromUserToTenant($mUser, $model);                    }//                    $model->type = Users::USER_TENANT;//                    $mUser = Users::saveUserVendorPurchaser($model);//                    $model->user_id = $mUser->id;//                    $model->pass_expiry_date = MyFormat::dateConverDmyToYmd($model->pass_expiry_date);//                    $model->save();//                    ProTransactionsVendorPurchaserDetail::saveSomeFile($model,'scanned_employment_pass');//                    ProTransactionsVendorPurchaserDetail::saveSomeFile($model,'scanned_passport');                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateBoxTenant();</script>');                 }            }            $this->render('CreateTransaction/AgentAddTenant', array('model' => $model));        } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }    public function actionAgentUpdateTenant($id) {        try {            $oldUser = false;            $model = $this->loadModelVendorPurchaserDetail($id);            $uidOld = $model->user_id;            $model->scenario = 'AgentUpdateTenantFromTenancy';            if( isset($_GET['from_transactions']) ){                $model->scenario = 'AgentUpdateTenant';            }            if( isset($_GET['add_property']) && $_GET['add_property'] == ProTransactions::ADD_UNLISTED ){                $model->scenario = 'AgentUpdateTenantUnlisted';            }                        $oldscanned_employment_pass = $model->scanned_employment_pass;            $oldscanned_passport = $model->scanned_passport;            $cmsFormater = new CmsFormatter();            $model->pass_expiry_date = $cmsFormater->formatDatePickerInput($model->pass_expiry_date);            if (isset($_POST['ProTransactionsVendorPurchaserDetail'])) {                $model->attributes = $_POST['ProTransactionsVendorPurchaserDetail'];                $model->scanned_employment_pass = CUploadedFile::getInstance($model, 'scanned_employment_pass');                $model->scanned_passport = CUploadedFile::getInstance($model, 'scanned_passport');                $model->validate();                if (!$model->hasErrors()) {                                        if($model->user_id!=$uidOld){                        $oldUser = true;                    }                                                            if (!is_null($model->scanned_employment_pass)) {                        ProTransactionsVendorPurchaserDetail::deleteOldFile($model, 'scanned_employment_pass');                        $model->scanned_employment_pass = ProTransactionsVendorPurchaserDetail::saveSomeFile($model, 'scanned_employment_pass');                    } else {                        $model->scanned_employment_pass = $oldscanned_employment_pass;                    }                    if (!is_null($model->scanned_passport)) {                        ProTransactionsVendorPurchaserDetail::deleteOldFile($model, 'scanned_passport');                        $model->scanned_passport = ProTransactionsVendorPurchaserDetail::saveSomeFile($model, 'scanned_passport');                    } else {                        $model->scanned_passport = $oldscanned_passport;                    }                    $model->pass_expiry_date = MyFormat::dateConverDmyToYmd($model->pass_expiry_date);                    $model->update();                    Users::UpdateUserVendorPurchaserOnly($model);                    // - not user -> copy 2 file upload form table user to this tenant at this transaction                    // sẽ không lưu file upload ở 2 chỗ nữa, chỉ lưu bên table user,                     // vì hiện tại không cho edit tenant or landlord//                    if($oldUser){ // không check kiểu này nữa                    if($model->is_new_user==1){                        $mUser = Users::model()->findByPk($model->user_id);                        if($mUser && $model->is_new_user && $model->id_type!= Users::ID_TYPE_CITIZENSHIP){                            // save 2 file upload if have to table user                            Users::saveTwoFileOfTenant($mUser, $model);                        }//                        Users::copyTwoFileFromUserToTenant($mUser, $model);                    }                    // copy 2 file upload form table user to this tenant at this transaction                                        die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateBoxTenant();</script>');                 }            }            $this->render('CreateTransaction/AgentUpdateTenant', array('model' => $model));        } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }        public function actionTenantFormView(){        try {            $model = $this->loadModelVendorPurchaserDetail($_POST['id']);            $model->pass_expiry_date = MyFormat::dateConverYmdToDmy($model->pass_expiry_date);                        $this->render('CreateTransaction/TenantFormView',array('model'=>$model));        } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }        public function actionAgentAddPurchaser() {        try {            $model = new ProTransactionsVendorPurchaserDetail('AgentAddVendor');            $model->transactions_id = $_GET['transactions_id'];            if (isset($_POST['ProTransactionsVendorPurchaserDetail'])) {                $model->attributes = $_POST['ProTransactionsVendorPurchaserDetail'];                $model->validate();                if (!$model->hasErrors()) {                    $mUser = Users::saveUserVendorPurchaser($model, ROLE_PURCHASER);                    $model->user_id = $mUser->id;                    $model->type = Users::USER_PURCHASER;                    $model->save();                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#purchaser-grid");   </script>');                }            }            $this->render('CreateTransaction/AgentAddPurchaser', array('model' => $model));        } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }    public function actionAgentUpdatePurchaser($id) {        try {            $model = $this->loadModelVendorPurchaserDetail($id);            $model = ProTransactionsVendorPurchaserDetail::OverideModel($model);            $model->scenario = 'AgentUpdatePurchaser';            if (isset($_POST['ProTransactionsVendorPurchaserDetail'])) {                $model->attributes = $_POST['ProTransactionsVendorPurchaserDetail'];                $model->validate();                if (!$model->hasErrors()) {                    $model->update();                    Users::UpdateUserVendorPurchaserOnly($model);                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#purchaser-grid");   </script>');                }            }            $this->render('CreateTransaction/AgentUpdatePurchaser', array('model' => $model));        } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }    public function actionAgentAddExternalCoBroke() {        try {            $model = new ProTransactionsBillTo('AgentAddExternalCoBroke');            if( isset($_GET['add_property']) && $_GET['add_property'] == ProTransactions::ADD_UNLISTED ){                $model->scenario = 'AgentAddExternalCoBrokeUnlisted';            }            $model->transactions_id = $_GET['transactions_id'];            if (isset($_POST['ProTransactionsBillTo'])) {                $model->attributes = $_POST['ProTransactionsBillTo'];                $model->validate();                if (!$model->hasErrors()) {                    $mUser = Users::saveUserExternalCoBroke($model, ROLE_EXTERNAL_CO_BROKE);                    $model->user_id = $mUser->id;                    $model->type = ProTransactionsBillTo::TYPE_EXTERNAL_CO_BROKE;                                       $model->save();                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#external-co-broke-grid");   </script>');                }            }            $this->render('CreateTransaction/AgentAddExternalCoBroke', array('model' => $model));        } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }    public function actionAgentUpdateExternalCoBroke($id) {        try {            $model = $this->loadModelBillTo($id);            $oldBillTo = $model->bill_to_id;            $model->scenario = 'AgentUpdateExternalCoBroke';            if( isset($_GET['add_property']) && $_GET['add_property'] == ProTransactions::ADD_UNLISTED ){                $model->scenario = 'AgentUpdateExternalCoBrokeUnlisted';            }            if (isset($_POST['ProTransactionsBillTo'])) {                $model->attributes = $_POST['ProTransactionsBillTo'];                $model->validate();                if (!$model->hasErrors()) {                    $mUser = Users::saveUserExternalCoBroke($model, ROLE_EXTERNAL_CO_BROKE);                    $model->bill_to_id = $oldBillTo;                    $model->update();                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#external-co-broke-grid");   </script>');                }            }            $this->render('CreateTransaction/AgentUpdateExternalCoBroke', array('model' => $model));        } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }    public function actionAgentAddInternalCoBroke() {        try {            $model = new ProTransactionsInternalCoBroke('AgentAddInternalCoBroke');            $model->transactions_id = $_GET['transactions_id'];            if (isset($_POST['ProTransactionsInternalCoBroke'])) {                $model->attributes = $_POST['ProTransactionsInternalCoBroke'];                $model->validate();                if (!$model->hasErrors()) {                    $model->save();                    die('<script type="text/javascript">parent.$.fancybox.close(); parent.fnUpdateGridView("#internal-co-broke-grid");   </script>');                }            }            $this->render('CreateTransaction/AgentAddInternalCoBroke', array('model' => $model));        } catch (Exception $exc) {            throw new CHttpException(404, $exc->getMessage());        }    }    /**     * @Author: ANH DUNG Mar 28, 2014     * @Todo: load model ProTransactionsVendorPurchaserDetail     * @Param: $id is pk     * @Return: model     */    public function loadModelBillTo($id) {        try {            $model = ProTransactionsBillTo::model()->findByPk($id);            if ($model === null) {                Yii::log("The requested page does not exist.");                throw new CHttpException(404, 'The requested page does not exist.');            }            return $model;        } catch (Exception $e) {            Yii::log("Exception " . print_r($e, true), 'error');            throw new CHttpException("Exception " . print_r($e, true));        }    }    /**     * @Author: ANH DUNG Mar 28, 2014     * @Todo: load model ProTransactionsVendorPurchaserDetail     * @Param: $id is pk     * @Return: model     */    public function loadModelVendorPurchaserDetail($id) {        try {            $model = ProTransactionsVendorPurchaserDetail::model()->findByPk($id);            if ($model === null) {                Yii::log("The requested page does not exist.");                throw new CHttpException(404, 'The requested page does not exist.');            }            return $model;        } catch (Exception $e) {            Yii::log("Exception " . print_r($e, true), 'error');            throw new CHttpException("Exception " . print_r($e, true));        }    }    // -- Nguyen Dung - use at     public function actionSearch_user() {        if (!isset($_GET['term']) || !Yii::app()->request->isAjaxRequest)            throw new CHttpException(404, "Invalid request");        $criteria = new CDbCriteria();//        $criteria->addCondition(" t.role_id ");         $criteria->addNotInCondition(" t.role_id", array(ROLE_ADMIN, ROLE_MANAGER));        $criteria->addSearchCondition('t.first_name', $_GET['term'], true); // true ==> LIKE '%...%'        $criteria->limit = 30;        $models = Users::model()->findAll($criteria);        $returnVal = array();        $cmsFormat = new CmsFormatter();        foreach ($models as $model) {            $label = $model->first_name;            $returnVal[] = array(                'label' => $label,                'value' => $label,                'id' => $model->id,                'nric_passportno_roc' => $model->nric_passportno_roc,            );        }        echo CJSON::encode($returnVal);        Yii::app()->end();    }    // Apr 16, 2014 -- Anh Dung - use at /member/member_profile/createTransaction/id/154/type/1/listing_id/0/list/transaction      public function actionSearchListing() {        if (!isset($_GET['term']) || !Yii::app()->request->isAjaxRequest)            throw new CHttpException(404, "Invalid request");        $criteria = new CDbCriteria();//        $criteria->addCondition(" t.role_id "); //        if(!isset($_GET['from_be_uid'])){            $criteria->compare(" t.user_id", Yii::app()->user->id );                $criteria->compare('t.status', STATUS_ACTIVE);        $criteria->compare('t.status_listing', STATUS_LISTING_ACTIVE);        $criteria->addCondition('t.property_name_or_address LIKE :term '			. 'OR t.display_title LIKE :term');		$criteria->params[':term'] = sprintf('%%%s%%', $_GET['term']);        $criteria->limit = 30;        $models = Listing::model()->findAll($criteria);        $returnVal = array();        $cmsFormat = new CmsFormatter();        foreach ($models as $model) {            $label = $model->property_name_or_address;			if ($model->display_title)				$label .= " ({$model->display_title})";            $returnVal[] = array(                'label' => $label,                'value' => $label,                'id' => $model->id,                'property_name_or_address' => $model->property_name_or_address,                'postal_code' => $model->postal_code,                'of_bedroom' => $model->rBedroom ? $model->rBedroom->name : '',                'unit_no' => $model->unit_from . '-' . $model->unit_to,            );        }        echo CJSON::encode($returnVal);        Yii::app()->end();    }        /**     * @Author: ANH DUNG Dec 19, 2014     * @Todo: use at member/member_profile/record_existing_tenancy/id/469/type/1/listing_id/0/add_property/1     * Hàm này để search all listing hệ thống, không giới hạn theo saleperson     * @Param: $model     */    public function actionSearchListingForTenancy() {        if (!isset($_GET['term']) || !Yii::app()->request->isAjaxRequest)            throw new CHttpException(404, "Invalid request");        $criteria = new CDbCriteria();//        $criteria->addCondition(" t.role_id "); //        $criteria->compare(" t.user_id", Yii::app()->user->id);        $criteria->compare('t.status', STATUS_ACTIVE);        $criteria->compare('t.status_listing', STATUS_LISTING_ACTIVE);        $criteria->addSearchCondition('t.property_name_or_address', $_GET['term'], true); // true ==> LIKE '%...%'        $criteria->limit = 30;        $models = Listing::model()->findAll($criteria);        $returnVal = array();        $cmsFormat = new CmsFormatter();        foreach ($models as $model) {            $label = $model->property_name_or_address;            $returnVal[] = array(                'label' => $label,                'value' => $label,                'id' => $model->id,                'property_name_or_address' => $model->property_name_or_address,                'postal_code' => $model->postal_code,                'of_bedroom' => $model->rBedroom ? $model->rBedroom->name : '',                'unit_no' => $model->unit_from . '-' . $model->unit_to,            );        }        echo CJSON::encode($returnVal);        Yii::app()->end();    }    // Apr 16, 2014 -- Anh Dung - use at /member/member_profile/createTransaction/id/154/type/1/listing_id/0/list/transaction      public function actionSelectListing() {        if (!isset($_POST['listing_id']))            throw new CHttpException(404, "Invalid ajax");        $id = isset($_GET['id']) ? $_GET['id'] : '';        $type = isset($_GET['type']) ? $_GET['type'] : ProTransactions::FOR_RENT;        $list = isset($_GET['list']) ? $_GET['list'] : 'listing';        $listing_id = $_POST['listing_id'];        $next = Yii::app()->createAbsoluteUrl('member/member_profile/createTransaction', array(            'id' => $id,            'type' => $type,            'listing_id' => $listing_id,            'list' => $list,        ));        $returnVal = array('next' => $next);        echo CJSON::encode($returnVal);        Yii::app()->end();    }    // -- Nguyen Dung - use at admin/usersAgent/update/id/190    public function actionSearch_agent_tier() {        if (!isset($_GET['term']) || !Yii::app()->request->isAjaxRequest)            throw new CHttpException(404, "Invalid request");        $criteria = new CDbCriteria();//        $criteria->addNotInCondition(" t.role_id",  array(ROLE_ADMIN, ROLE_MANAGER));         $criteria->addInCondition(" t.role_id", array(ROLE_AGENT));        $criteria->addSearchCondition('CONCAT(t.first_name, t.last_name)', $_GET['term'], true); // true ==> LIKE '%...%'        if (isset($_GET['id'])) {            $criteria->addNotInCondition(" t.id", array($_GET['id']));        }        $criteria->limit = 30;        $models = Users::model()->findAll($criteria);        $returnVal = array();        $cmsFormat = new CmsFormatter();        foreach ($models as $model) {            $label = $cmsFormat->formatFullNameRegisteredUsers($model);            $returnVal[] = array(                'label' => $label,                'value' => $label,                'id' => $model->id,                'row_class_id' => "row_class_id$model->id",                'full_name' => $label,                'nric_passportno_roc' => $model->nric_passportno_roc,            );        }        echo CJSON::encode($returnVal);        Yii::app()->end();    }        // -- Sep 11, 2014 ANH DUNG - use at admin/fiinvoice/create    public function actionSearch_user_financial() {        if (!isset($_GET['term']) || !Yii::app()->request->isAjaxRequest)            throw new CHttpException(404, "Invalid request");        $criteria = new CDbCriteria();//        $criteria->addNotInCondition(" t.role_id",  array(ROLE_ADMIN, ROLE_MANAGER));         $criteria->addInCondition(" t.role_id", array(ROLE_AGENT));        $criteria->addSearchCondition('CONCAT(t.first_name, t.last_name)', $_GET['term'], true); // true ==> LIKE '%...%'        if (isset($_GET['id'])) {            $criteria->addNotInCondition(" t.id", array($_GET['id']));        }        $criteria->limit = 30;        $models = Users::model()->findAll($criteria);        $returnVal = array();        $cmsFormat = new CmsFormatter();        foreach ($models as $model) {            $label = $cmsFormat->formatFullNameRegisteredUsers($model);            $returnVal[] = array(                'label' => $label,                'value' => $label,                'id' => $model->id,                'row_class_id' => "row_class_id$model->id",                'full_name' => $label,                'nric_passportno_roc' => $model->nric_passportno_roc,                'address' => $model->address,                'postal_code' => $model->postal_code,                'commission_schema_id' => (isset($model->rCommissionSchema)) ? $model->rCommissionSchema->percent : 0,            );        }        echo CJSON::encode($returnVal);        Yii::app()->end();    }        /**     * @Author: ANH DUNG Apr 24, 2014     * @Todo: search autocomplete landlord and tenant at FE create new transaction     */        public function actionSearchLandlordTenant() {        if (!isset($_GET['term']) || !Yii::app()->request->isAjaxRequest)            throw new CHttpException(404, "Invalid request");        $role = ROLE_LANDLORD;        $aCheck = array(ROLE_LANDLORD, ROLE_TENANT);        if(isset($_GET['role']) && in_array($_GET['role'], $aCheck)){            $role = $_GET['role'];        }        $criteria = new CDbCriteria();        $criteria->compare(" t.role_id", $role);        $criteria->addSearchCondition('CONCAT(t.first_name, " " ,t.last_name, " " ,t.nric_passportno_roc)', $_GET['term'], true); // true ==> LIKE '%...%'        $criteria->limit = 30;        $models = Users::model()->findAll($criteria);        $returnVal = array();        $cmsFormat = new CmsFormatter();        foreach ($models as $model) {            $label = $cmsFormat->formatFullNameRegisteredUsers($model);            $returnVal[] = array(                'label' => $label,                'value' => $label,                'id' => $model->id,                'row_class_id' => "row_class_id$model->id",                'full_name' => $label,                'email' => $model->email_not_login,                'nric_passportno_roc' => $model->nric_passportno_roc,                'contact_no' => $model->contact_no,                'address' => $model->address,                'postal_code' => $model->postal_code,                'id_type' => $model->id_type,                'pass_expiry_date' => $cmsFormat->formatDatePickerInput($model->pass_expiry_date),                'upload_employment_pass_passport' => $model->upload_employment_pass_passport,                'scanned_passport' => $model->scanned_passport,                'postal_code' => $model->postal_code,            );        }        echo CJSON::encode($returnVal);        Yii::app()->end();    }        /**     * @Author: ANH DUNG Apr 24, 2014     * @Todo: search autocomplete landlord and tenant at FE create new transaction     */        public function actionSearchAgent() {        if (!isset($_GET['term']) || !Yii::app()->request->isAjaxRequest)            throw new CHttpException(404, "Invalid request");        $criteria = new CDbCriteria();        $criteria->compare(" t.role_id", ROLE_AGENT);        $criteria->addNotInCondition(" t.id", array(Yii::app()->user->id) );        $criteria->compare(" t.status", STATUS_ACTIVE);        $criteria->addSearchCondition('CONCAT(t.first_name, " " ,t.last_name, " " ,t.nric_passportno_roc)', $_GET['term'], true); // true ==> LIKE '%...%'        $criteria->limit = 30;        $models = Users::model()->findAll($criteria);        $returnVal = array();        $cmsFormat = new CmsFormatter();        foreach ($models as $model) {            $label = $cmsFormat->formatFullNameRegisteredUsers($model);            $returnVal[] = array(                'label' => $label,                'value' => $label,                'id' => $model->id,                'row_class_id' => "row_class_id$model->id",                'full_name' => $label,                'email' => $model->email,                'email_not_login' => $model->email_not_login,                'nric_passportno_roc' => $model->nric_passportno_roc,                'contact_no' => $model->contact_no,                'address' => $model->address,                'postal_code' => $model->postal_code,                'id_type' => $model->id_type,                'pass_expiry_date' => $cmsFormat->formatDatePickerInput($model->pass_expiry_date),                'upload_employment_pass_passport' => $model->upload_employment_pass_passport,                'scanned_passport' => $model->scanned_passport,                'postal_code' => $model->postal_code,            );        }        echo CJSON::encode($returnVal);        Yii::app()->end();    }        /**     * @Author: ANH DUNG Dec 02, 2014     * @Todo: search autocomplete name property     */        public function actionSearchPropertyName() {        if (!isset($_GET['term']) || !Yii::app()->request->isAjaxRequest)            throw new CHttpException(404, "Invalid request");        $criteria = new CDbCriteria();//        $criteria->compare(" t.property_name_or_address", $_GET['term'], true);        Listing::GetConditionSearchListing($criteria, $_GET['term'] );//        $criteria->addInCondition(" t.user_id", array(Yii::app()->user->id) );//        $criteria->compare(" t.status_listing", STATUS_LISTING_ACTIVE);        $criteria->with = array('rTransaction');        $criteria->compare(" rTransaction.user_id", Yii::app()->user->id);        $criteria->limit = 30;        $criteria->together = true;        $models = ProTransactionsPropertyDetail::model()->findAll($criteria);        $session=Yii::app()->session;        $returnVal = array();        $aTransId = array();// use for ProTransactionsPropertyDetail->getListTenanciesAgent         $cmsFormat = new CmsFormatter();                        foreach ($models as $model) {            //            $label = CHtml::encode($model->property_name_or_address);            $label = $model->property_name_or_address;            $returnVal[] = array(                'label' => $label,                'value' => $label,//                'id' => $model->id,            );            $aTransId[$model->transactions_id] = $model->transactions_id;        }                $session['ARR_TRANS_ID_TENANCY'] = $aTransId;        echo CJSON::encode($returnVal);        Yii::app()->end();    }    public function actionRemark_detail($id) {        $model = Listing::model()->findByPk($id);        if (empty($model)) {            Yii::log("The requested page does not exist.");            throw new CHttpException(404, 'The requested page does not exist.');        }        $role_id = '';        if (isset(Yii::app()->session['LOGGED_USER'])) {            $userCurent = Yii::app()->session['LOGGED_USER'];            if (isset($userCurent->role_id) && $userCurent->role_id <= ROLE_ADMIN) {                $role_id = $userCurent->role_id;            }        }        $model->scenario = 'admin_rejected';        if (!empty($role_id)) {            if (isset($_POST['Listing'])) {                $model->attributes = $_POST['Listing'];                if ($model->validate()) {                    $model->remark_by_admin = strip_tags($model->remark_by_admin);                    $model->status_listing = STATUS_LISTING_REJECTED;                    $model->rejected_on = date('Y-m-d h:i:s');                    $model->is_rejected =1;                    $model->save();                    die('<script type="text/javascript">parent.$.fancybox.close();parent.$.fn.yiiGridView.update("sr-resume-request-grid");  </script>');                }            }        }        $this->render('listing/remark_detail', array('model' => $model, 'role_id' => $role_id));    }    public function actionAppeal($id) {        $model = Listing::model()->findByPk($id);        if (empty($model)) {            Yii::log("The requested page does not exist.");            throw new CHttpException(404, 'The requested page does not exist.');        }        $model->scenario = 'listing_appeal_upload_file';        if (isset($_POST['Listing'])) {            $Multifile = CUploadedFile::getInstances($model, 'file');            $model->attributes = $_POST['Listing'];            $model->validate();            //validate                        if (!empty($Multifile) && is_array($Multifile)) {                $isClose = false;                foreach ($Multifile as $file) {                    $validateAppeal = new ProListingApeal();                    $validateAppeal->file = $file;                    $validateAppeal->validate();                    if ($validateAppeal->hasErrors()) {                        $model->addError('file', $validateAppeal->getError('file'));                        break;                    }                }                //checkuoload appeal               $coutAppeal = ProListingApeal::model()->countByAttributes(array('listing_id'=>$id));               if($coutAppeal>=LIMIT_UPLOAD_APPREAL){                   $model->addError('file','Limit upload ' . LIMIT_UPLOAD_APPREAL . ' files');               }                           }            if (!$model->hasErrors()) {//              save FIle                foreach ($Multifile as $file) {                     $coutAppeal = ProListingApeal::model()->countByAttributes(array('listing_id'=>$id));                     if($coutAppeal<LIMIT_UPLOAD_APPREAL){                        $appeal = new ProListingApeal();                        $appeal->listing_id = $id;                        $appeal->file_name  = str_replace('.'.$file->getExtensionName(),'', $file->getName());                        $appeal->file = 'support-document-' . uniqid() . $file->getExtensionName();                        $appeal->created_date = date('Y-m-d h:i:s');                        if ($appeal->save()) {                            $ImageProcessing = new ImageProcessing();                            $ImageProcessing->createSingleDirectoryByPath("/upload/listing/$id/appeal");                            $file->saveAs(YII_UPLOAD_DIR . "/listing/$id/appeal/" . $appeal->file);                        }                                           }                }                $model->status_listing = STATUS_LISTING_PENDING;                $model->is_rejected = 0;                if($model->save()){                    die('<script type="text/javascript">parent.$.fancybox.close();parent.$.fn.yiiGridView.update("sr-resume-request-grid");  </script>');                }            }        }        $role_id = '';        $appeal ='';        if (isset(Yii::app()->session['LOGGED_USER'])) {            $userCurent = Yii::app()->session['LOGGED_USER'];            if (isset($userCurent->role_id) && $userCurent->role_id <= ROLE_ADMIN) {                $role_id = $userCurent->role_id;            }        }        $appeal = new ProListingApeal();        $appeal->listing_id = $model->id;        $this->render('listing/appeal', array('model' => $model, 'role_id' => $role_id,'appeal'=>$appeal));    }        public function actionDeleteappeal($id) {         $appeal = ProListingApeal::model()->findByPk($id);         if($appeal){             if($appeal->delete()){                   @unlink(YII_UPLOAD_DIR .'/listing/'.$appeal->listing_id .'/appeal/'.$appeal->file);             }         }    }        public function actionSeachmap(){        $this->layout=false;        $this->render('listing/map');    }    public function actionSeachmap2(){        $this->layout=false;        $this->render('listing/map2');    }    public function actionSeachmapdropdownlist(){        $this->layout=false;        $this->render('listing/map_dropdownlist');    }            public function actionValidateListing(){        $this->layout=false;       if(isset($_POST['ajax']) && $_POST['ajax']==='yw1')       {    Yii::app()->controller->layout =false;               echo CActiveForm::validate($model);               Yii::app()->end();       }            }        public function actionCheckPhoto($id,$releated,$checkitem){        $countPhoto = ProListingReleated::model()->countByAttributes(array('listing_id'=>$id));              if($countPhoto<21 && $checkitem==1){            $releatedListing = new ProListingReleated();            $releatedListing->listing_id = $id;            $releatedListing->listing_releated = $releated;            $releatedListing->save();                    }else{            ProListingReleated::model()->deleteAllByAttributes(array('listing_id'=>$id,'listing_releated'=>$releated));        }    }    /*     * DTOAN     * Search listing on create listing    */    public function actionSearchlistingonmap(){        if (!isset($_GET['term']) || !Yii::app()->request->isAjaxRequest)            throw new CHttpException(404, "Invalid request");        $criteria = new CDbCriteria();        $criteria->compare('t.status', STATUS_ACTIVE);        $criteria->compare('t.status_listing', STATUS_LISTING_ACTIVE);        $criteria->addSearchCondition('t.property_name_or_address', $_GET['term'], true); // true ==> LIKE '%...%'        $criteria->limit = 30;        $models = Listing::model()->findAll($criteria);        $returnVal = array();        $cmsFormat = new CmsFormatter();        $html='';        $url    =  Yii::app()->createAbsoluteUrl('/upload/datamap.txt');        $output = $this->curl_get_contents($url);        $dataType = array();        if($output !=''){            $dataType = json_decode($output,true);        }        foreach ($models as $model) {            $type = (isset($dataType[$model->postal_code])) ? $dataType[$model->postal_code]['title'] : '';            $PropertyID = (isset($dataType[$model->postal_code])) ? $dataType[$model->postal_code]['id'] : '';            $html .='<tr class="sort_title"  >                        <td class="alt">                            <input type="radio" value="1" name="check-radio" class="select-postal-code">                        </td>                        <td class="alt title " data-timestamp="'.$model->property_name_or_address.'" >'.$model->property_name_or_address.'</td>                        <td class="alt title type_custom_onsite propertyType" type="'.$PropertyID.'" >'.$type .'</td>                        <td class="alt postal-code" xy="'.$model->postal_code_xy.'">'.$model->postal_code.'</td>                    </tr>';        }        echo $html;        Yii::app()->end();    }        function curl_get_contents($url) {        // Initiate the curl session        $ch = curl_init();        // Set the URL        curl_setopt($ch, CURLOPT_URL, $url);        // Removes the headers from the output        curl_setopt($ch, CURLOPT_HEADER, 0);        // Return the output instead of displaying it directly        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        // Execute the curl session        $output = curl_exec($ch);        // Close the curl session        curl_close($ch);        // Return the output as a variable        return $output;    }    public function actionLoaddata($data){        $this->layout=false;/*        ini_set('memory_limit', '500M');        $criteria = new CDbCriteria;        $criteria->condition = $condition;        $url    =  Yii::app()->createAbsoluteUrl('/upload/datamap.txt');        $output = $this->curl_get_contents($url);        die($output);*/        if($data){            $data = json_decode($data,true);            $dataJson = array();            if(is_array($data) && count($data)>0){                $arrayType=array(                    'H'=>array('id'=>18,'title'=>'HDB Apartment') ,// HDB Apartment ID of tabe property type                    'K'=>array('id'=>0,'title' =>'Block'),// KHONG CO                    'A'=>array('id'=>1,'title' =>'Apartment/Condo'),// Apartment/Condo                    'C'=>array('id'=>3,'title' =>'Condominium'),// Condominium                    'S'=>array('id'=>0,'title' =>'Standard'),// KHONG CO                    'G'=>array('id'=>0,'title' =>'Godown'),// KHONG CO                    'P'=>array('id'=>0,'title' =>'PO Box, My Mail Box or My SingPost'),// KHONG CO                    'B'=>array('id'=>0,'title' =>'Locked Bag'),// KHONG CO                    'W'=>array('id'=>0,'title' =>'Window Delivery'),// KHONG CO                    'U'=>array('id'=>5,'title' =>'Walk-up'),// Walk-up                );                $criteria = new CDbCriteria;                foreach($data as $v){                    $criteria->compare('t.postal_code',trim($v), true, 'OR');                }                $dataTmp = ApiPostcode::model()->findAll($criteria);                               if($dataTmp){                    $tmp      = array();                    $building = array();                    $buildingTmp = array();                    //search postal code                    foreach($dataTmp as $v){                        $code = substr($v->postal_code, 0,6);                        $type = substr($v->postal_code, 6,1);                        $keyBuilding        = substr($v->postal_code, strlen($v->postal_code)-6,strlen($v->postal_code));                                             $building[$code]    = $keyBuilding;                         $buildingTmp[$keyBuilding] = $code;                         $tmp[$code]['title']     = (isset($arrayType[$type])) ? $arrayType[$type]['title'] : '';                        $tmp[$code]['type']      = (isset($arrayType[$type])) ? $arrayType[$type]['id'] : '';                        $tmp[$code]['building']  = '';//                        $tmp[$code]['blk_no']    = Listing::getHouseBlkNo($code);// get at below                        $tmp[$code]['blk_no']    = '';// get at below                        $tmp[$code]['street_name']  = Listing::getStreetName($code);                        $dataJson[$code] = $tmp[$code];                    }                    //search building                    if(is_array($building)&& count($building)>0){                        $criteria = new CDbCriteria;                        foreach($building as $v){                            $criteria->compare('t.building',trim($v), true, 'OR');                        }                        $dataTmpBuilding = ApiBuilding::model()->findAll($criteria);                        if(is_array( $dataTmpBuilding ) && count( $dataTmpBuilding )>0){                            foreach($dataTmpBuilding as $b){                                $buildingkey  = substr($b->building, 0,6);                                $buildingName = substr($b->building, 6,45);                                if(isset($buildingTmp[$buildingkey])){                                    if(isset($tmp[$buildingTmp[$buildingkey]])){                                        $tmp[$buildingTmp[$buildingkey]]['building'] = trim($buildingName);                                                                                $tmp[$buildingTmp[$buildingkey]]['blk_no'] = Listing::getHouseBlkNo( $buildingTmp[$buildingkey] );                                                                                $dataJson[$buildingTmp[$buildingkey]]      = $tmp[$buildingTmp[$buildingkey]];                                    }                                                                   }                            }                        }                    }                }            }            die(json_encode($dataJson));        }    }    public function actionScandata(){        $this->layout=false;        ini_set('memory_limit', '500M');        $arrayType=array(            'H'=>array('id'=>18,'title'=>'HDB Apartment') ,// HDB Apartment ID of tabe property type            'K'=>array('id'=>0,'title' =>'Block'),// KHONG CO            'A'=>array('id'=>1,'title' =>'Apartment/Condo'),// Apartment/Condo            'C'=>array('id'=>3,'title' =>'Condominium'),// Condominium            'S'=>array('id'=>0,'title' =>'Standard'),// KHONG CO            'G'=>array('id'=>0,'title' =>'Godown'),// KHONG CO            'P'=>array('id'=>0,'title' =>'PO Box, My Mail Box or My SingPost'),// KHONG CO            'B'=>array('id'=>0,'title' =>'Locked Bag'),// KHONG CO            'W'=>array('id'=>0,'title' =>'Window Delivery'),// KHONG CO            'U'=>array('id'=>5,'title' =>'Walk-up'),// Walk-up        );        $ApiCode = ApiPostcode::model()->findAll();        $arrayCode = array();        if($ApiCode && count($ApiCode)>0){            foreach($ApiCode as $k=>$v){                $code = substr($v->postal_code, 0,6);                $type = substr($v->postal_code, 6,1);                $arrayCode[$code] = (isset($arrayType[$type])) ? $arrayType[$type] : '';            }        }        $contentJson = json_encode($arrayCode);        $dir = Yii::getPathOfAlias('webroot').'/upload/datamap.txt';        $file = fopen($dir ,"w+") or die("can't open file");        fwrite($file,$contentJson) or die("Error: can't write in file.");    }    /*DTOAN SEARCH TRANSACTION  PAYMENT VOUCHER*/    public function actionSearchtransactionvoucher($q){        $criteria=new CDbCriteria;        $criteria->compare('t.transactions_no',trim($q),true);        $data    = FiInvoice::model()->findAll($criteria);        $arr= array();        if($data){            foreach($data as $item){                $mInvoiceDetail = FiInvoiceDetail::GetOneInvoiceDetail($item->id);                $description = $mInvoiceDetail!=null ? $mInvoiceDetail->description:"";                $arr[] = array(                    'id'=>$item->id,                    'label'=>$item->transactions_no,                    'invoice_no'=>$item->invoice_no,                    'gross'=>$item->total_amount_due,                    'description'=> $description                    );            }        }/*        $arrData = CHtml::listData($data,'id','invoice_no');*/        die(json_encode($arr));    }}