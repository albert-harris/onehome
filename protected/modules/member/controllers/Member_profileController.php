<?php/** * ANH DUNG * MemberController * Manager transaction for user Agent * Date Mar 27, 2014 */class Member_profileController extends MemberController {    public function actionIndex() {        $this->render('index');    }    /**     * <Jason>     * <My profile of user, who created by admin>     *///    public function actionMyprofileAdmin(){//        try {//            $this->pageTitle = Yii::app()->params['title'] . ' - My Profile';////            $this->layout = 'application.views.layouts.layout_user';//            $mUser = Users::model()->findByPk(Yii::app()->user->id);//            $mUser->scenario = 'myprofile_admin';////            if(isset($_POST['Users']))//            {//                $mUser->attributes=$_POST['Users'];//                if($mUser->validate()){//                    if ($_POST['Users']['newpassword'] != null && $_POST['Users']['password_confirm'] != null) {//                        if($mUser->password_hash == md5($_POST['Users']['newpassword'])){//                            $mUser->addError('newpassword', 'New password cannot be duplicate with current password.');//                        }//                        else{//                            $mUser->password_hash = md5(trim($_POST['Users']['newpassword']));//                            $mUser->temp_password = ($_POST['Users']['newpassword']);//                        }//                    }//                    if(!$mUser->getErrors()){//                        if($mUser->save('nric_passportno_roc', 'email_not_login', 'first_name', 'password_hash', 'temp_password', 'contact_no', 'id_type', 'address')){//                            Yii::app()->user->setFlash('success', "My Profile has changed!");//                            $mUser->newpassword = '';//                            $mUser->password_confirm = '';//                        }//                    }//                }//            }////            $this->render('admin_user/myprofile',//                array('model'=>$mUser)//            );////        } catch (Exception $exc) {//            echo $exc->getMessage();//        }//    }    /**     * <Jason>     * <My profile of normal user>     */    public function actionMyprofile() {        try {            if (Yii::app()->user->role_id == ROLE_AGENT) {                $this->redirect(Yii::app()->createAbsoluteUrl('member/agent/myprofile'));            }            $this->pageTitle = 'My Profile - ' . Yii::app()->params['title'];            $this->layout = 'application.views.layouts.layout_user';            $mUser = Users::model()->findByPk(Yii::app()->user->id);            $mUser->scenario = 'myprofile';            if (isset($_POST['Users'])) {                $mUser->attributes = $_POST['Users'];                if ($mUser->validate()) {                    if ($_POST['Users']['newpassword'] != null && $_POST['Users']['password_confirm'] != null) {                        if ($mUser->password_hash == md5($_POST['Users']['newpassword'])) {                            $mUser->addError('newpassword', 'New password cannot be duplicate with current password.');                        } else {                            $mUser->password_hash = md5(trim($_POST['Users']['newpassword']));                            $mUser->temp_password = ($_POST['Users']['newpassword']);                        }                    }                    if (!$mUser->getErrors()) {                        $mUser->is_subscriber = $_POST['Users']['is_subscriber'];                        if ($mUser->is_subscriber) {                            Subscriber::saveSubscriberUser($mUser->id);                        } else {                            Subscriber::updateSubscriberUser($mUser->id);                        }                        if ($mUser->save('title', 'first_name', 'password_hash', 'temp_password', 'last_name', 'phone', 'country_id', 'address', 'address2', 'postal_code', 'issubcriber')) {                            Yii::app()->user->setFlash('success', "My Profile has changed!");                            $mUser->newpassword = '';                            $mUser->password_confirm = '';                        }                    }                }            }            $this->render('normal_user/myprofile', array('model' => $mUser)            );        } catch (Exception $exc) {            echo $exc->getMessage();        }    }    /**     * <Jason>     * <To delete all shortlist in my shortlist page>     */    public function actionRemoveAllShortlist() {        $response = array();        if (!Yii::app()->request->isPostRequest)            return;        $response['message'] = 'Remove failed. An error has occured.';        $response['code'] = false;        try {            if (ProUserShortList::model()->deleteAll('user_id = ?', array(Yii::app()->user->id))) {                $response['code'] = true;                $response['message'] = 'Remove successful.';            }        } catch (Exception $e) {            Yii::log("Exception " . print_r($e, true), 'error');            $response['message'] .= YII_DEBUG ? ' ' . $e->getMessage() : null;        }        echo json_encode($response);        die;    }    /**     * <Jason>     * <To delete shortlist>     */    public function actionRemoveShortlist() {        $response = array();        if (!Yii::app()->request->isPostRequest)            return;        $response['message'] = 'Remove failed. An error has occured.';        $response['code'] = false;        try {            if (ProUserShortList::model()->deleteAll('user_id = ? AND listing_id = ?', array(Yii::app()->user->id, $_POST['listing_id']))) {                $response['code'] = true;                $response['message'] = 'Remove successful.';            }        } catch (Exception $e) {            Yii::log("Exception " . print_r($e, true), 'error');            $response['message'] .= YII_DEBUG ? ' ' . $e->getMessage() : null;        }        echo json_encode($response);        die;    }    /**     * <Jason>     * <My profile of normal user>     */    public function actionMyshortlist() {        try {            $this->pageTitle = 'My Shortlist - ' . Yii::app()->params['title'];            $this->layout = 'application.views.layouts.layout_user';            //Kvan            $shortList = ProUserShortList::getShortListByUser(Yii::app()->user->id);            $arrShortListing = array();            if (!empty($shortList)) {                foreach ($shortList as $listing) {                    $arrShortListing[] = $listing->listing_id;                }            }            $listing = Listing::getListingByArrId($arrShortListing);            $this->render('normal_user/myshortlist', array(//                    'model'=>$mUser,                'listing' => $listing                    )            );        } catch (Exception $exc) {            echo $exc->getMessage();        }    }    //Kvan    public function actionSendEnquiryShortList() {        $this->pageTitle = 'Enquiry Multiple Listing - ' . Yii::app()->params['title'];        $this->layout = 'application.views.layouts.layout_user';        if (isset($_POST['chkList'])) {            $arrEnquiry = $_POST['chkList'];            $listing = Listing::getListingByArrId($arrEnquiry);            $model = new ProEnquiryProperty();            $model->name = Yii::app()->user->first_name . ' ' . Yii::app()->user->last_name;            $model->email = Yii::app()->user->email;            $model->phone = Yii::app()->user->phone;            $model->country_id = Yii::app()->user->country;            if (isset($_POST['ProEnquiryProperty'])) {                $model->attributes = $_POST['ProEnquiryProperty'];                $model->get_update = 1;                if ($model->validate()) {                    foreach ($arrEnquiry as $enquiry) {                        $model = new ProEnquiryProperty();                        $model->attributes = $_POST['ProEnquiryProperty'];                        $model->property_id = $enquiry;                        $model->get_update = 1;                        if ($model->save()) {                            /*                             * -----------------                             * dtoan : send mail                             * -----------------                             */                            SendEmail::sendEmailShortList($model);                        }                    }                    $thankYouEnquiry = Pages::getPageById(PAGE_THANK_ENQUIRY_PROPERTY);                    Yii::app()->user->setFlash('success', $thankYouEnquiry->content);//                    $this->redirect(Yii::app()->createAbsoluteUrl('site/thankyou'));                    $this->redirect(Yii::app()->createAbsoluteUrl('page/index', array('slug' => 'thank-you-message-for-sending-global-enquiry')));                }            }            $this->render('normal_user/sendEnquiry', array(                'model' => $model,                'listing' => $listing                    )            );        } else            throw new CHttpException(404, 'Invalid request. Please do not repeat this request again.');    }    /**     * @Author: ANH DUNG Mar 27, 2014     * @Todo: dùng để tạo mới và update transaction - khá là rối logic - be careful     * @param: $type: 1: for sale, 2: for rent     * @param: $listing_id: listing_id     *///    public function actionCreateTransaction($type, $listing_id){    public function actionCreateTransaction($type) {        /** 1. get thông tin user login         * 2. createnew tạo mới 1 transaction với status tạm =0, sau đó get thông tin liên quan         * 3. get thông tin của listing đưa vào model của $mTransactionsPropertyDetail         * 4. get thông tin của ,1: vendor,2: purchaser, 3: Landlord, 4: Tenant Purchaser’s Details, External Co-broke details         *          */        MyFormat::validateUserAccess(ROLE_AGENT);        $this->pageTitle = "Create Transaction - " . Yii::app()->params['title'];//        try {            $mUser = Users::model()->findByPk(Yii::app()->user->id);            $listing_id = 0;            if (isset($_GET['listing_id'])) {                $listing_id = $_GET['listing_id'];            }            // Dec 02, 2014            $add_property = ProTransactions::ADD_EXISTING;            if (isset($_GET['add_property']) && in_array($_GET['add_property'], ProTransactions::$LIST_ADD_PROPERTY)) {                $add_property = $_GET['add_property'];            }            // Dec 02, 2014            if (!isset($_GET['id'])) {                $mTransactions = ProTransactions::CreateNewRecordTransaction($type, $listing_id);                $this->redirect(array('createTransaction',                    'id' => $mTransactions->id, // id transaction                    'type' => $type, // type rent, sale                    'listing_id' => $listing_id, // id listing                     'add_property' => $add_property, // id listing                     'list' => $_GET['list'], // from all transaction list OR from listing                ));            } else {                $mTransactions = ProTransactions::getByPk($_GET['id']);            }            $this->validateLink($type, $listing_id, $add_property); // OPEN IT            $this->GetSomeInfo($mTransactions, $type, $add_property);            if (isset($_POST['ProTransactionsPropertyDetail'])) {                $this->GetPostAndValidate($mTransactions);                if (!$mTransactions->hasErrors() &&                        !$mTransactions->mPropertyDetail->hasErrors() &&                        !$mTransactions->mBillTo->hasErrors() &&                        !$mTransactions->mTenatDefault->hasErrors() &&                        !$mTransactions->mLandlord->hasErrors() &&                        !$mTransactions->mTenant->hasErrors() &&                        !$mTransactions->mVendor->hasErrors() &&                        !$mTransactions->mPurchaser->hasErrors() &&                        !$mTransactions->mPropertyDocument->hasErrors()                ) {                    $mTransactions->invoice_bill_to = $mTransactions->mBillTo->bill_to_id;                    ProTransactions::convertToDbDate($mTransactions);                    $prefix_code = date('Y') . date('m');                    if (!isset($_GET['update_transactions'])) {                        $mTransactions->transactions_no = MyFormat::getNextId('ProTransactions', $prefix_code, 'transactions_no', ProTransactions::LENGTH_TRANS_NO);                    }                    $mTransactions->status = STATUS_ACTIVE;                    $mTransactions->update(); // update transaction                    // save  mPropertyDetail                    $mTransactions->mPropertyDetail->transactions_id = $mTransactions->id;                    $mTransactions->mPropertyDetail->listing_id = $mTransactions->listing_id;                    $mTransactions->mPropertyDetail->save();                    //save mBillTo                    $mTransactions->mBillTo->transactions_id = $mTransactions->id;                    $mTransactions->mBillTo->client_type_id = $mTransactions->client_type_id;                    $mTransactions->mBillTo->type = ProTransactionsBillTo::TYPE_VENDOR_PURCHASER;                    $mUserBillTo = Users::saveUserExternalCoBroke($mTransactions->mBillTo, ROLE_EXTERNAL_CO_BROKE);                    $mTransactions->mBillTo->user_id = $mUserBillTo->id;                    $mTransactions->mBillTo->save(); // save mBillTo                    // save tenant                    if ($mTransactions->type == ProTransactions::FOR_RENT) {                        $mTransactions->mTenatDefault->transactions_id = $mTransactions->id;                        ProTransactionsVendorPurchaserDetail::saveOneTenant($mTransactions->mTenatDefault, 1);                        // update new expiration date for tenant to check login                        ProTransactionsVendorPurchaserDetail::updateExpirationTenant($mTransactions);                    }                    // end save tenant                    //save ProTransactionsPropertyDocument                    /* Closed by HTram, because it were uploaded by ajax at the form                      ProTransactionsPropertyDocument::saveRecord($mTransactions);                     */                    // 1. email to all new user trong table pro_pro_transactions_vendor_purchaser_detail                    // Fix Aug 08, 2014 hàm này đã move vào admin (ProTransactions::UpdateAdminStatus) khi admin approve trong backend thì mới send//                    ProTransactionsVendorPurchaserDetail::sendMailToNewUser($mTransactions->id, $mTransactions);//                    ProTransactionsVendorPurchaserDetail::updateRoleUserAfterCreateUpdateTransaction($mTransactions->id);//                    // Fix Aug 08, 2014                    // 2. delete all table pro_pro_transactions_vendor_purchaser_detail với transactions_id ko có id nằm trong mảng submit lên                    // không xử lý kiểu này nữa, khi tạo tenant hoặc landlord ở dưới thì mặc định là tạo mới trên hệ thống rồi                    // logic này đúng                    $mTransactions = ProTransactions::LoadModelRelationByPk($mTransactions->id);                    ProTransactionsBillTo::UpdateBillTo($mTransactions);                    // Jun 16, 2014 đưa bill to lên trên save commission thì mới có đc rExternalCoBrokeCommission                    // chỗ này find lại model của transaction để lấy hết relation - single query                    $mTransactions = ProTransactions::LoadModelRelationByPk($mTransactions->id);                    ProTransactionsSaveCommission::saveOneTransaction($mTransactions);                    // đoạn này phải find lại model vì bên trên find có with thì                     // dữ liệu cập nhật ở hàm UpdateBillTo bên trên sẽ ko có trong model này => phải find lại                    Listing::SetStatusPastListing($mTransactions->listing_id);                    $listRedirect = 'listing';                    if (isset($_GET['list'])) {                        $listRedirect = $_GET['list'];                    }					SendEmail::newTransaction($mTransactions);                    Yii::app()->user->setFlash('success', 'Your transaction has been created successfully and waiting for approval');                    $this->redirect(array('viewTransaction',                        'id' => $mTransactions->id, // id transaction                        'list' => $listRedirect, // from all transaction list OR from listing                    ));                    // may be redirect to view                } else {                }            }            $this->render('CreateTransaction', array('mUser' => $mUser,                'mTransactions' => $mTransactions,            ));//        } catch (Exception $exc) {//            echo $exc->getMessage();//            throw new CHttpException(404, 'Invalid Request');//        }    }    // xử lý lấy 1 số thông tin của model transaction     public function GetSomeInfo($mTransactions, $type, $add_property) {        $mTransactions->type = $type;        $mTransactions->add_property = $add_property;        $mTransactions->listing_autocompelte = '';        if (isset($_GET['listing_id']) && $_GET['listing_id']) {            $mTransactions->listing_id = $_GET['listing_id'];            $mTransactions->listing_autocompelte = $mTransactions->listing ? $mTransactions->listing->property_name_or_address : '';        }        $mTransactions->mBillTo = $mTransactions->rBillTo ? $mTransactions->rBillTo : ( new ProTransactionsBillTo());//            $mTransactions->mInternalCoBroke = $mTransactions->rInternalCoBroke?$mTransactions->rInternalCoBroke:( array() );        $mTransactions->mPropertyDetail = $mTransactions->rPropertyDetail ? $mTransactions->rPropertyDetail : ( new ProTransactionsPropertyDetail() );        $mTransactions->aModelPropertyDocument = count($mTransactions->rPropertyDocument) ? $mTransactions->rPropertyDocument : ( ProTransactionsPropertyDocument::getDefaultArrayForCreate($type) );//            $mTransactions->mVendorPurchaserDetail = $mTransactions->rVendorPurchaserDetail?$mTransactions->rVendorPurchaserDetail:( array() );        $mTransactions->mTenatDefault = $mTransactions->rTenantDefault ? $mTransactions->rTenantDefault : ( new ProTransactionsVendorPurchaserDetail() );        ProTransactionsVendorPurchaserDetail::OverideModel($mTransactions->mTenatDefault);        $mTransactions->mLandlord = new ProTransactionsVendorPurchaserDetail();        $mTransactions->mTenant = new ProTransactionsVendorPurchaserDetail();        $mTransactions->mVendor = new ProTransactionsVendorPurchaserDetail();        $mTransactions->mPurchaser = new ProTransactionsVendorPurchaserDetail();        // Nov 03, 2014        // co the cai nay khong can//        if (!empty($mTransactions->tenancy_amount)) {//            $mTransactions->tenancy_amount = Listing::getformatPrice($mTransactions->tenancy_amount);//        }//        if (!empty($mTransactions->deposit_payable)) {//            $mTransactions->deposit_payable = Listing::getformatPrice($mTransactions->deposit_payable);//        }        // co the cai nay khong can//        if (!empty($mTransactions->mBillTo->commission_amount)) {//            $mTransactions->mBillTo->commission_amount = Listing::getformatPrice($mTransactions->mBillTo->commission_amount);//        }//        // con 3 field: transacted_price, valuation_price, tenancy_amount        // Nov 03, 2014        $mTransactions->mTenatDefault->scenario = 'AgentAddTenant';        $mTransactions->mPropertyDetail->scenario = 'CreateTransactionFromListing';        if (isset($_GET['list']) && $_GET['list'] == 'transaction') {            $mTransactions->mPropertyDetail->scenario = 'CreateTransaction';        }        if ($mTransactions->add_property == ProTransactions::ADD_UNLISTED) {            $mTransactions->mPropertyDetail->scenario = 'CreateTransactionUnlisted';            $mTransactions->mTenatDefault->scenario = 'AgentAddTenantUnlisted';        }        $mTransactions->mBillTo->scenario = 'CreateVendorPurchaser';//            $mTransactions->mPropertyDocument->scenario = 'UploadDocument';        $mTransactions->scenario = 'CreateTransaction'; // default for sale        if ($mTransactions->type == ProTransactions::FOR_RENT) {            $mTransactions->scenario = 'CreateTransactionForRent'; // for rent        }        // Dec 02, 2014 đã tạo 2 scenario cho phần thêm add property name Existing vs Unlisted        // CreateTransactionForRentUnlisted, CreateTransactionForSaleUnlisted        // Hiện tại thấy chưa cần tách ra nhiều scenario như vậy, nên chưa if else chỗ này... will        ProTransactions::copyFromListingToTransaction($mTransactions);        ProTransactions::convertToUserDate($mTransactions);        // chưa làm phần update cho transaction??//            ProTransactions::convertToUserDate($mTransactions);            }    // xử lý bắt biến post và gọi validate cho các model, tách ra cho dễ nhìn    public function GetPostAndValidate($mTransactions) {        $mTransactions->attributes = $_POST['ProTransactions'];        $mTransactions->mPropertyDetail->attributes = $_POST['ProTransactionsPropertyDetail'];        $mTransactions->mBillTo->attributes = $_POST['ProTransactionsBillTo'];        $mTransactions->mPropertyDocument = new ProTransactionsPropertyDocument();        $mTransactions->mPropertyDocument->attributes = $_POST['ProTransactionsPropertyDocument'];        $mTransactions->mTenatDefault->attributes = isset($_POST['ProTransactionsVendorPurchaserDetail']) ? $_POST['ProTransactionsVendorPurchaserDetail'] : array();        $mTransactions->mTenatDefault->scanned_employment_pass = CUploadedFile::getInstance($mTransactions->mTenatDefault, 'scanned_employment_pass');        $mTransactions->mTenatDefault->scanned_passport = CUploadedFile::getInstance($mTransactions->mTenatDefault, 'scanned_passport');        if ($mTransactions->type == ProTransactions::FOR_SALE && $mTransactions->with_tenancy) {            $mTransactions->scenario = 'WithTenancyYes';        }        if ($mTransactions->mBillTo->bill_to_id == ProTransactions::BILL_TO_SOLICITOR) {            $mTransactions->mBillTo->scenario = 'CreateVendorPurchaserSolicitorSelected';        } elseif ($mTransactions->mBillTo->bill_to_id == ProTransactions::BILL_TO_EXTERNAL_CO_BROKE) {            $mTransactions->mBillTo->scenario = 'ExternalCoBrokeSelected';            ProTransactionsBillTo::ResetVal($mTransactions->mBillTo);        }        $mTransactions->validate();        $mTransactions->mPropertyDetail->validate();        $mTransactions->mBillTo->validate();        if ($mTransactions->type == ProTransactions::FOR_RENT) {            if (!empty($mTransactions->mTenatDefault->user_id))                $mTransactions->mTenatDefault->scenario = 'AgentAddTenantExitUid';            $mTransactions->mTenatDefault->validate();            Users::validateDefaultTenant($mTransactions->mTenatDefault);        }else {            $mTransactions->mTenatDefault->scenario = null;        }        // chưa xử lý gì phần validate này ProTransactionsPropertyDocument        ProTransactionsPropertyDocument::validateFile($mTransactions);        if ($mTransactions->type == ProTransactions::FOR_RENT) {            ProTransactions::validateLandlordTenant($mTransactions);        } else {            // for sale - validate for vendor and purcharser            ProTransactions::validateVendorPurchaser($mTransactions);        }    }    /**     * @Author: ANH DUNG Apr 01, 2014     * @Todo: validate link user type for create new transaction     */    public function validateLink($type, $listing_id, $add_property) {        $valid = true;        if (!in_array($type, ProTransactions::$aTypeSaleRent))            $valid = false;        if (!in_array($add_property, ProTransactions::$LIST_ADD_PROPERTY)) {            $valid = false;        }        // 2, check $listing_id        $mListing = Listing::model()->findByPk($listing_id);        if ($mListing && Yii::app()->user->id != $mListing->user_id)            $valid = false;        // 3. check transaction id        if (isset($_GET['id'])) {            $mTransactions = ProTransactions::getByPk($_GET['id']);            if (is_null($mTransactions) || ( $mTransactions && Yii::app()->user->id != $mTransactions->user_id) || ( $mTransactions && $mTransactions->status > STATUS_INACTIVE )            // nếu đã có status > 0, thì không cho sửa nữa            )                $valid = false;        }        if (!$valid)//            throw new CHttpException(404, 'Invalid Request');            $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));    }    /**     * @Author: ANH DUNG Apr 16, 2014     * @Todo: validate link user type for create new transaction     */    public function validateLinkView($transactions_id) {        $valid = true;        // 3. check transaction id        $mTransactions = ProTransactions::getByPk($transactions_id);        if (is_null($mTransactions) || ( $mTransactions && Yii::app()->user->id != $mTransactions->user_id))            $valid = false;        if (!$valid) {//            throw new CHttpException(404, 'Invalid Request');            $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));        }        return $mTransactions;    }    /**     * @Author: ANH DUNG Apr 15, 2014     * @Todo: TransactionManagement(     */    public function actionTransactionManagement() {        MyFormat::validateUserAccess(ROLE_AGENT);        $this->pageTitle = "Transaction Management - " . Yii::app()->params['title'];        try {            $model = new ProTransactions();            if (isset($_GET['ProTransactions'])) {                $model->attributes = $_GET['ProTransactions'];            }            $model->user_id = Yii::app()->user->id;            $this->render('TransactionManagement', array(                'model' => $model,            ));        } catch (Exception $exc) {            throw new CHttpException(404, 'The requested page does not exist.');        }    }    /**     * @Author: ANH DUNG Apr 16, 2014     * @Todo: View Transaction     */    public function actionViewTransaction($id) {        MyFormat::validateUserAccess(ROLE_AGENT);        $this->pageTitle = "View Transaction - " . Yii::app()->params['title'];        try {            $mTransactions = $this->validateLinkView($id);            $type = $mTransactions->type;            $mTransactions->mBillTo = $mTransactions->rBillTo ? $mTransactions->rBillTo : ( new ProTransactionsBillTo());//            $mTransactions->mInternalCoBroke = $mTransactions->rInternalCoBroke?$mTransactions->rInternalCoBroke:( array() );            $mTransactions->mPropertyDetail = $mTransactions->rPropertyDetail ? $mTransactions->rPropertyDetail : ( new ProTransactionsPropertyDetail() );            $mTransactions->aModelPropertyDocument = count($mTransactions->rPropertyDocument) ? $mTransactions->rPropertyDocument : ( ProTransactionsPropertyDocument::getDefaultArrayForCreate($type) );//            $mTransactions->mVendorPurchaserDetail = $mTransactions->rVendorPurchaserDetail?$mTransactions->rVendorPurchaserDetail:( array() );//            $mTransactions->mPropertyDetail->scenario = 'CreateTransaction';//            $mTransactions->mBillTo->scenario = 'CreateVendorPurchaser';//            $mTransactions->scenario = 'CreateTransaction'; // default for sale//            ProTransactions::convertToUserDate($mTransactions);            $this->render('ViewTransaction/ViewTransaction', array(                'mTransactions' => $mTransactions,            ));        } catch (Exception $exc) {            throw new CHttpException(404, 'The requested page does not exist.');        }    }    /**     * @Author: ANH DUNG Apr 18, 2014     * @Todo: commissionLog list     */    public function actionCommissionLog() {        MyFormat::validateUserAccess(ROLE_AGENT);        $this->pageTitle = "Commission Log - " . Yii::app()->params['title'];        try {            $model = new ProTransactionsSaveCommission();            $model->unsetAttributes();            $model->status = 1;            if (isset($_GET['ProTransactionsSaveCommission'])) {                $model->attributes = $_GET['ProTransactionsSaveCommission'];            }            $this->render('CommissionLog', array(                'model' => $model,            ));        } catch (Exception $exc) {            throw new CHttpException(404, 'The requested page does not exist.');        }    }    public function actionDelete($id) {        try {            if (Yii::app()->request->isPostRequest) {                // we only allow deletion via POST request                if ($model = $this->loadModelVendorPurchaserDetail($id)) {//                    $model->need_delete = 1;//                    $model->update(array('need_delete'));                    if ($model->delete())                        Yii::log("Delete record " . print_r($model->attributes, true), 'info');                }            }            else {                Yii::log("Invalid request. Please do not repeat this request again.");                throw new CHttpException(400, 'Invalid request. Please do not repeat this request again.');            }        } catch (Exception $e) {            Yii::log("Exception " . print_r($e, true), 'error');            throw new CHttpException("Exception " . print_r($e, true));        }    }    /**     * @Author: ANH DUNG Mar 28, 2014     * @Todo: load model ProTransactionsVendorPurchaserDetail     * @Param: $id is pk     * @Return: model     */    public function loadModelVendorPurchaserDetail($id, $modelName = 'ProTransactionsVendorPurchaserDetail') {        try {            $model_ = call_user_func(array($modelName, 'model'));            $model = $model_->findByPk($id);            if ($model === null) {                Yii::log("The requested page does not exist.");                throw new CHttpException(404, 'The requested page does not exist.');            }            return $model;        } catch (Exception $e) {            Yii::log("Exception " . print_r($e, true), 'error');            throw new CHttpException("Exception " . print_r($e, true));        }    }    public function actionDelete_internal($id) {        try {            if (Yii::app()->request->isPostRequest) {                // we only allow deletion via POST request                if ($model = $this->loadModelVendorPurchaserDetail($id, 'ProTransactionsInternalCoBroke')) {                    if ($model->delete())                        Yii::log("Delete record " . print_r($model->attributes, true), 'info');                }            }            else {                Yii::log("Invalid request. Please do not repeat this request again.");                throw new CHttpException(400, 'Invalid request. Please do not repeat this request again.');            }        } catch (Exception $e) {            Yii::log("Exception " . print_r($e, true), 'error');            throw new CHttpException("Exception " . print_r($e, true));        }    }    /**     * @Author: ANH DUNG Jul 28, 2014     * @Todo: for tenant and landlord submit testimonials     */    public function actionSubmitTestimonials() {        try {            $RoleAllow = array(ROLE_LANDLORD, ROLE_TENANT);            if (!in_array(Yii::app()->user->role_id, $RoleAllow))                $this->redirect(Yii::app()->createAbsoluteUrl('/'));            $this->pageTitle = "Submit Testimonials - " . Yii::app()->params['title'];            $this->layout = 'application.views.layouts.layout_user';            $model = new ProTestimonial('create');            $model->status = 0;            if (isset($_POST['ProTestimonial'])) {                $model->attributes = $_POST['ProTestimonial'];                $model->description = InputHelper::removeScriptTag($model->description);                $model->is_member = 1;                $model->status = STATUS_INACTIVE;                $model->validate();                if (!$model->hasErrors()) {                    $model->save();                    SendEmail::NotifyTestimonialSubmitToAdmin($model);                    Yii::app()->user->setFlash('SuccessSubmit', "Your testimonial has been submitted.");                    $this->redirect(array('member_profile/submitTestimonials'));                }            }            $this->render('Testimonials/SubmitTestimonials', array(                'model' => $model,            ));        } catch (Exception $exc) {            throw new CHttpException(404, 'The requested page does not exist.');        }    }    public function actionEngageus() {        $this->pageTitle = "Engage Us - " . Yii::app()->params['title'];        $this->layout = 'application.views.layouts.layout_user';        $this->render('Engageus');    }    /**     * @Author: ANH DUNG Nov 28, 2014     * @Todo: On the Salesperson’s list of tenancy page,      * there is a new button called “ Record existing tenancy ” for      * creating a tenancy that does not require creating a transaction before it:     * @param: $add_property: 1: ADD_EXISTING, 2: ADD_UNLISTED     */    public function actionRecord_existing_tenancy($add_property) {        /** 1. get thông tin user login         * 2. createnew tạo mới 1 transaction với status tạm =0, sau đó get thông tin liên quan         * 3. get thông tin của listing đưa vào model của $mTransactionsPropertyDetail         * 4. get thông tin của 3: Landlord, 4: Tenant Purchaser’s Details         */        MyFormat::validateUserAccess(ROLE_AGENT);        $this->pageTitle = "Record existing tenancy - " . Yii::app()->params['title'];        try {            $mUser = Users::model()->findByPk(Yii::app()->user->id);            $type = ProTransactions::FOR_RENT;            $listing_id = 0;            if (isset($_GET['listing_id'])) {                $listing_id = $_GET['listing_id'];            }            // handle create new             if (!isset($_GET['id'])) {                $mTransactions = ProTransactions::CreateNewRecordTransaction($type, $listing_id);                $this->redirect(array('record_existing_tenancy',                    'id' => $mTransactions->id, // id transaction                    'type' => $type, // type rent, sale                    'listing_id' => $listing_id, // id listing                    'add_property' => $add_property,                ));            } else {                $mTransactions = ProTransactions::getByPk($_GET['id']);            }            $this->ValidateLinkRecord($add_property, $listing_id); // OPEN IT            $this->GetSomeInfoRecord($mTransactions, $add_property);            $this->HandlePost($mTransactions);            $this->render('record/record_existing_tenancy', array('mUser' => $mUser,                'mTransactions' => $mTransactions,            ));        } catch (Exception $exc) {//            echo $exc->getMessage();            throw new CHttpException(404, 'Invalid Request');        }    }    /**     * @Author: ANH DUNG Apr 01, 2014     * @Todo: validate link user type for create new record_existing_tenancy     */    public function ValidateLinkRecord($add_property, $listing_id) {        $valid = true;        if (!in_array($add_property, ProTransactions::$LIST_ADD_PROPERTY)) {            $valid = false;        }        // 2, check $listing_id, có thể sẽ không check cái này//        $mListing = Listing::model()->findByPk($listing_id);//        if($mListing && Yii::app()->user->id!=$mListing->user_id)//                $valid=false;        // 3. check transaction id        if (isset($_GET['id'])) {            $mTransactions = ProTransactions::getByPk($_GET['id']);            if (is_null($mTransactions) || ( $mTransactions && Yii::app()->user->id != $mTransactions->user_id) || ( $mTransactions && $mTransactions->status > STATUS_INACTIVE && $mTransactions->status != STATUS_TENANCY_DRAFT )            // nếu đã có status > 0, mà không phải draft, thì không cho sửa nữa            )                $valid = false;        }        if (!$valid) {//            throw new CHttpException(404, 'Invalid Request');            $this->redirect(Yii::app()->createAbsoluteUrl('member/member_profile/myprofile'));        }    }    // xử lý lấy 1 số thông tin của model transaction     public function GetSomeInfoRecord($mTransactions, $add_property) {        $mTransactions->add_property = $add_property;        $mTransactions->listing_autocompelte = '';        if (isset($_GET['listing_id']) && $_GET['listing_id']) {            $mTransactions->listing_id = $_GET['listing_id'];            $mTransactions->listing_autocompelte = $mTransactions->listing ? $mTransactions->listing->property_name_or_address : '';        }        $mTransactions->mPropertyDetail = $mTransactions->rPropertyDetail ? $mTransactions->rPropertyDetail : ( new ProTransactionsPropertyDetail() );        $mTransactions->aModelPropertyDocument = count($mTransactions->rPropertyDocument) ? $mTransactions->rPropertyDocument : ( ProTransactionsPropertyDocument::getDefaultArrayForCreate($mTransactions->type) );        $mTransactions->mTenatDefault = $mTransactions->rTenantDefault ? $mTransactions->rTenantDefault : ( new ProTransactionsVendorPurchaserDetail() );        ProTransactionsVendorPurchaserDetail::OverideModel($mTransactions->mTenatDefault);        if (!is_null($mTransactions->mTenatDefault->id)) {            $mTransactions->mTenatDefault->pass_expiry_date = MyFormat::dateConverYmdToDmy($mTransactions->mTenatDefault->pass_expiry_date, 'd/m/Y');        }        $mTransactions->mLandlord = new ProTransactionsVendorPurchaserDetail();        $mTransactions->mTenant = new ProTransactionsVendorPurchaserDetail();        $mTransactions->mPropertyDetail->scenario = 'CreateTransactionTenancyOnly';//        Close Now 28, 2014 $mTransactions->mPropertyDetail->scenario = 'CreateTransactionFromListing';         //        if(isset($_GET['list']) && $_GET['list']=='transaction'){//            $mTransactions->mPropertyDetail->scenario = 'CreateTransaction';//        }        $mTransactions->mTenatDefault->scenario = 'AgentAddTenantFromTenancy';//            $mTransactions->mPropertyDocument->scenario = 'UploadDocument';        $mTransactions->scenario = 'CreateTransactionForRentRecordTenancy'; // for rent        ProTransactions::copyFromListingToTransaction($mTransactions);        ProTransactions::convertToUserDate($mTransactions);        // chưa làm phần update cho transaction??//            ProTransactions::convertToUserDate($mTransactions);            }    /**     * @Author: ANH DUNG Dec 01, 2014     * @Todo: handle POST for create tenancy without create transaction     */    public function HandlePost($mTransactions) {        if (isset($_POST['ProTransactionsPropertyDetail'])) {            $this->HandleSaveAsDraft($mTransactions);            $this->GetPostAndValidateTenancy($mTransactions);            if (!$mTransactions->hasErrors() &&                    !$mTransactions->mPropertyDetail->hasErrors() &&                    !$mTransactions->mTenatDefault->hasErrors() &&                    !$mTransactions->mTenatDefault->hasErrors() &&                    !$mTransactions->mTenant->hasErrors() &&                    !$mTransactions->mPropertyDocument->hasErrors()            ) {                ProTransactions::convertToDbDate($mTransactions);                $prefix_code = "T" . date('Y') . date('m');                if (!isset($_GET['update_transactions'])) {                    $mTransactions->transactions_no = MyFormat::getNextId('ProTransactions', $prefix_code, 'transactions_no', ProTransactions::LENGTH_TRANS_NO);                }                $mTransactions->status = STATUS_TENANCY_NEW;                $mTransactions->update(); // update transaction                // save  mPropertyDetail                $mTransactions->mPropertyDetail->transactions_id = $mTransactions->id;                $mTransactions->mPropertyDetail->listing_id = $mTransactions->listing_id;                $mTransactions->mPropertyDetail->save();                // save tenant                if ($mTransactions->type == ProTransactions::FOR_RENT) {                    $mTransactions->mTenatDefault->transactions_id = $mTransactions->id;                    ProTransactionsVendorPurchaserDetail::saveOneTenant($mTransactions->mTenatDefault, 1);                    // update new expiration date for tenant to check login                    ProTransactionsVendorPurchaserDetail::updateExpirationTenant($mTransactions);                }                // end save tenant                //save ProTransactionsPropertyDocument                /*Closed by HTram, because it were uploaded by ajax at the form                ProTransactionsPropertyDocument::saveRecord($mTransactions);                 *                  */                // 1. email to all new user trong table pro_pro_transactions_vendor_purchaser_detail                // Fix Aug 08, 2014 hàm này đã move vào admin (ProTransactions::UpdateAdminStatus) khi admin approve trong backend thì mới send                // Dec 01, 2014 Once tenancy is submitted, admin need to approve.                //  Once admin approved, LL and Tenant account will automatically send an email with Login ID and Password (generated) to Tenant and LL. //                    ProTransactionsVendorPurchaserDetail::sendMailToNewUser($mTransactions->id, $mTransactions);//                    ProTransactionsVendorPurchaserDetail::updateRoleUserAfterCreateUpdateTransaction($mTransactions->id);                // Fix Aug 08, 2014                // 2. delete all table pro_pro_transactions_vendor_purchaser_detail với transactions_id ko có id nằm trong mảng submit lên                // không xử lý kiểu này nữa, khi tạo tenant hoặc landlord ở dưới thì mặc định là tạo mới trên hệ thống rồi                // logic này đúng                $mTransactions = ProTransactions::LoadModelRelationByPk($mTransactions->id);//               Close Dec 01, 2014 ProTransactionsBillTo::UpdateBillTo($mTransactions);                // Jun 16, 2014 đưa bill to lên trên save commission thì mới có đc rExternalCoBrokeCommission                // chỗ này find lại model của transaction để lấy hết relation - single query//               Close Dec 01, 2014                $mTransactions = ProTransactions::LoadModelRelationByPk($mTransactions->id);//               Close Dec 01, 2014                ProTransactionsSaveCommission::saveOneTransaction($mTransactions);                // đoạn này phải find lại model vì bên trên find có with thì                 // dữ liệu cập nhật ở hàm UpdateBillTo bên trên sẽ ko có trong model này => phải find lại                // AutoGenInvoice//               Close Dec 01, 2014 ProTransactionsInvoice::AutoGenInvoice($mTransactions);//               Close Dec 01, 2014 Listing::SetStatusPastListing($mTransactions->listing_id);                Yii::app()->user->setFlash('success', 'Your tenancy has been created successfully');                $link = Yii::app()->createAbsoluteUrl('member/agent/view', array('tenancy' => $mTransactions->id));                $this->redirect($link);                // may be redirect to view            }        }    }    // Dec 01, 2014 xử lý bắt biến post và gọi validate cho các model, tách ra cho dễ nhìn    public function GetPostAndValidateTenancy($mTransactions) {        $this->GetPostOnly($mTransactions);        $mTransactions->validate();        $mTransactions->mPropertyDetail->validate();        if ($mTransactions->type == ProTransactions::FOR_RENT) { // it alway for rent            if (!empty($mTransactions->mTenatDefault->user_id))                $mTransactions->mTenatDefault->scenario = 'AgentAddTenantExitUid';            $mTransactions->mTenatDefault->validate();            Users::validateDefaultTenant($mTransactions->mTenatDefault);        }        // chưa xử lý gì phần validate này ProTransactionsPropertyDocument        ProTransactionsPropertyDocument::validateFile($mTransactions);        if ($mTransactions->type == ProTransactions::FOR_RENT) {            ProTransactions::validateLandlordTenant($mTransactions);        } else {            // for sale - validate for vendor and purcharser            ProTransactions::validateVendorPurchaser($mTransactions);        }    }    /**     * @Author: ANH DUNG Jan 13, 2015     * @Todo: get attribute from post     */    public function GetPostOnly(&$mTransactions) {        $mTransactions->attributes = $_POST['ProTransactions'];        $mTransactions->mPropertyDetail->attributes = $_POST['ProTransactionsPropertyDetail'];        $mTransactions->mPropertyDocument = new ProTransactionsPropertyDocument();        $mTransactions->mPropertyDocument->attributes = $_POST['ProTransactionsPropertyDocument'];        $mTransactions->mTenatDefault->attributes = isset($_POST['ProTransactionsVendorPurchaserDetail']) ? $_POST['ProTransactionsVendorPurchaserDetail'] : array();        $mTransactions->mTenatDefault->scanned_employment_pass = CUploadedFile::getInstance($mTransactions->mTenatDefault, 'scanned_employment_pass');        $mTransactions->mTenatDefault->scanned_passport = CUploadedFile::getInstance($mTransactions->mTenatDefault, 'scanned_passport');    }    /**     * @Author: ANH DUNG Jan 13, 2015     * @Todo: Handle SaveAsDraft     */    public function HandleSaveAsDraft($mTransactions) {        if (isset($_POST['SaveAsDraft']) && $_POST['SaveAsDraft'] == 1) {            $this->GetPostOnly($mTransactions);            $this->HandleSaveAsDraftOnlySave($mTransactions);            $link = Yii::app()->createAbsoluteUrl('member/agent/tenancy', array('status' => STATUS_TENANCY_DRAFT));            $this->redirect($link);            // may be redirect to view        }    }    /**     * @Author: ANH DUNG Jan 13, 2015     * @Todo: Save Draft Only     * @Param: $mTransactions     */    public function HandleSaveAsDraftOnlySave(&$mTransactions) {        ProTransactions::convertToDbDate($mTransactions);        $prefix_code = "T" . date('Y') . date('m');        if (!isset($_GET['update_transactions'])) {            $mTransactions->transactions_no = MyFormat::getNextId('ProTransactions', $prefix_code, 'transactions_no', ProTransactions::LENGTH_TRANS_NO);        }        $mTransactions->status = STATUS_TENANCY_DRAFT;        $mTransactions->update(); // update transaction        // save  mPropertyDetail        $mTransactions->mPropertyDetail->transactions_id = $mTransactions->id;        $mTransactions->mPropertyDetail->listing_id = $mTransactions->listing_id;        $mTransactions->mPropertyDetail->scenario = null;        $mTransactions->mPropertyDetail->save();        // save tenant        if ($mTransactions->type == ProTransactions::FOR_RENT) {            $mTransactions->mTenatDefault->transactions_id = $mTransactions->id;            ProTransactionsVendorPurchaserDetail::saveOneTenant($mTransactions->mTenatDefault, 1, array('scenario_null' => 1));            // update new expiration date for tenant to check login            ProTransactionsVendorPurchaserDetail::updateExpirationTenant($mTransactions);        }        // end save tenant        //save ProTransactionsPropertyDocument        /*Closed by HTram, because it were uploaded by ajax at the form        ProTransactionsPropertyDocument::saveRecord($mTransactions);         *          */    }    /**     * @Author: HTram August 25, 2015     * @Todo: save file upload ajax     * @Param: $model model  ProTransactionsPropertyDocument     */    public function actionAjaxFileTransactionsPropertyDocument() {        try {            $response = array();            $response['code'] = false;            $response['message'] = 'Invalid Request.';            $cmsFormater = new CmsFormatter();            if (!Yii::app()->request->isPostRequest) {                throw new Exception('An error has occured.');            }            if (isset($_POST['ProTransactionsPropertyDocument'])) {                if (isset($_GET['id_transaction'])) {                    $id_trans = $_GET['id_transaction'];                                       if (isset($_POST['ProTransactionsPropertyDocument']['title']) && count($_POST['ProTransactionsPropertyDocument']['title'])) {                        foreach ($_POST['ProTransactionsPropertyDocument']['title'] as $key => $item) {                            if(isset($_POST['title']) && $_POST['title']!=''){                                if ($_POST['title'] == $item) {                                                                        $file_name_exist = ProTransactionsPropertyDocument::getDocumentOfTransactionAndTitle($id_trans, $item);                                    if ($file_name_exist) {                                        $mFile = $file_name_exist;                                        $mFile->transactions_id = $id_trans;                                        $mFile->title = InputHelper::removeScriptTag($item);                                        $mFile->order_no = $key;                                        $mFile->file_name = CUploadedFile::getInstance(ProTransactionsPropertyDocument, 'file_name[' . $key . ']');                                                                                if (!is_null($mFile->file_name)) {                                            $mFile->file_name = ProTransactionsPropertyDocument::saveFile($mFile, 'file_name', ProTransactionsPropertyDocument::$folderUpload, $key);                                        }                                        if (!empty($mFile->title) && !empty($mFile->file_name)) {                                            $mFile->save();                                            $aData = array('model'=>$mFile, 'fieldName'=>'file_name');                                            $url_image = $cmsFormater->formatViewTransactionPropertyDocument($aData,$mFile->transactions_id);                                             $response['code'] = true;                                            $response['message'] = 'successfully';                                            $response['url_image'] = $url_image;                                            $response['key'] = $key;                                            $response['id'] = $mFile->id;                                        } else {                                            $response['code'] = false;                                        }                                    } else {                                        $mFile = new ProTransactionsPropertyDocument('UploadDocument');                                        $mFile->transactions_id = $id_trans;                                        $mFile->title = InputHelper::removeScriptTag($item);                                        $mFile->order_no = $key;                                        $mFile->file_name = CUploadedFile::getInstance(ProTransactionsPropertyDocument, 'file_name[' . $key . ']');                                         if (!is_null($mFile->file_name)) {                                            $mFile->file_name = ProTransactionsPropertyDocument::saveFile($mFile, 'file_name', ProTransactionsPropertyDocument::$folderUpload, $key);                                        }                                        if (!empty($mFile->title) && !empty($mFile->file_name)) {                                            $mFile->save();                                            $aData = array('model'=>$mFile, 'fieldName'=>'file_name');                                            $url_image = $cmsFormater->formatViewTransactionPropertyDocument($aData,$mFile->transactions_id);                                             $response['code'] = true;                                            $response['message'] = 'successfully';                                            $response['url_image'] = $url_image;                                            $response['key'] = $key;                                            $response['id'] = $mFile->id;                                        }                                    }                                }                            }else{                                $response['false'] = false;                                $response['message'] = 'Title cannot be blank.';                            }                        }                    } else {                        $response['code'] = false;                        $response['message'] = 'failed';                    }                }            }        } catch (Exception $e) {            $response['message'] = 'An error has occured.';            $response['code'] = false;        }        echo json_encode($response);        die;    }    public function actionAjaxDeleteFileDocument(){        $response = array();        if (isset($_POST['is_ajax']) && $_POST['is_ajax'] == 1) {            if ($_POST['id_file']) {                $file_exist = ProTransactionsPropertyDocument::model()->findByPk($_POST['id_file']);                if($file_exist){                    $file_exist->delete();                    $response['code'] = true;                    $response['message'] = 'successfully';                }            }        }        echo json_encode($response);    }}?>