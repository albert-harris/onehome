<?php/** * This is the model class for table "{{_banners}}". * * The followings are the available columns in table '{{_banners}}': * @property integer $id * @property string $banner_title * @property string $banner_decsription * @property string $thumb_image * @property string $large_image * @property string $link * @property integer $place_holder_id *  doctor_name, doctor_description,  */class Banners extends ActiveRecord{    public $image;    public $imageFile;    public static $folderUpload = 'banner';    public static $bannerType = array(''=>'Select',1=>'Top',2=>'Middle',3=>'Bottom',4=>'Middle Home',5=>'Top Home');        public static $aSizeBannerTop = array('728x90' => array('width'=>728, 'height'=>90),                                        '263x220' => array('width'=>263, 'height'=>220),                                        '265x365' => array('width'=>265, 'height'=>365),                                        '1400x584' => array('width'=>1400, 'height'=>584),                                        );    //    public static $aSizeBannerMiddle = array('728x90' => array('width'=>728, 'height'=>90),'263x220' => array('width'=>263, 'height'=>220));    /**	 * Returns the static model of the specified AR class.	 * @param string $className active record class name.	 * @return Banners the static model class	 */        public static function getAdsBannerByType($type){        $model = self::model()->findAll(array('condition'=>'status = 1 AND banner_type = '.$type,'order'=>'created_date'));        return $model;    }    	public static function model($className=__CLASS__)	{		return parent::model($className);	}	/**	 * @return string the associated database table name	 */	public function tableName()            {   		return '{{_banners}}';	}	/**	 * @return array validation rules for model attributes.	 */	public function rules()	{		// NOTE: you should only define rules for those attributes that		// will receive user inputs.		return array(			array('imageFile', 'required','on'=>'create'),//			array('banner_type', 'validateBanner'),			array('banner_type', 'required'),			array('link', 'length', 'max'=>255),                        array('link','validateLink'), 			// The following rule is used by search().			// Please remove those attributes that should not be searched.			array('id, banner_type, banner_title,banner_description, large_image, link, imageFile,order_by,status', 'safe'),                        array('imageFile', 'file', 'on'=>'create,update',                            'allowEmpty'=>true,                            'types'=> 'jpg,gif,png',                            'wrongType'=>'Only jpg,gif,png are allowed.',                            'maxSize' => ActiveRecord::getMaxFileSizeImage(), // 3MB                            'tooLarge' => 'The file was larger than '.(ActiveRecord::getMaxFileSize()/1024).' KB. Please upload a smaller file.',                        ),                        array(                            'imageFile','match',                            'pattern'=>'/^[^\\/?*:&;{}\\\\]+\\.[^\\/?*:;{}\\\\]{3}$/',                             'message'=>'Image files name cannot include special characters: &%$#',                        ),                                        		);	}	/**	 * @return array relational rules.	 */	public function relations()	{		// NOTE: you may need to adjust the relation name and the related		// class name for the relations automatically generated below.		return array(		);	}	/**	 * @return array customized attribute labels (name=>label)	 */	public function attributeLabels()	{		return array(			'id' => 'ID',			'banner_title' => 'Banner Title',			'banner_description' => 'Banner Description',			'thumb_image' => 'Thumb Image',			'large_image' => 'Image',                        'imageFile' => 'Image',			'link' => 'Link',                        'order_by' => 'Order',                        'banner_type'=>'Banner Type',		);	}	/**	 * Retrieves a list of models based on the current search/filter conditions.	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.	 */	public function search()	{		// Warning: Please modify the following code to remove attributes that		// should not be searched.		$criteria=new CDbCriteria;		$criteria->compare('id',$this->id);		$criteria->compare('banner_title',$this->banner_title,true);		$criteria->compare('banner_description',$this->banner_description,true);                $criteria->compare('status',$this->status);                $criteria->compare('banner_type',$this->banner_type);                $sort = new CSort();                $sort->attributes = array(                    'created_date'=>array(                            'asc'=>'t.created_date',                            'desc'=>'t.created_date desc',                            'default'=>'asc',                    ),                                       'banner_type'=>array(                            'asc'=>'banner_type',                            'desc'=>'banner_type desc',                            'default'=>'asc',                    ),                );                    $sort->defaultOrder = 'banner_type DESC'; 		return new CActiveDataProvider($this, array(			'criteria'=>$criteria,                        'pagination' => array('pageSize' => 15),                     'sort'=>$sort,		));	}            /**     * Check link of banner     * <Jason>     * HaiPM - 20130723     */    public function validateLink($attribute,$params)    {        if(trim($this->link) != ''){            $label = $this->getAttributeLabel('link');            $tempUrl = strtolower($this->link);            if(strpos($tempUrl,'http://')!==false || strpos($tempUrl,'https://')!==false)                    $a=1;            else               $this->addError("link","$label must have http:// OR https://");        }    }        public function getBannerByType($type)    {	$model = Banners::model()->find('status=1 AND banner_type="'.(int)$type.'" ORDER BY `order`'); 	return $model;    }        public function activate()    {        $this->status = 1;        $this->update();    }    public function deactivate()    {        $this->status = 0;        $this->update();    }         //HTram    public function resizeBanner($oldBlogFileName = null)    {        $ImageProcessing = new ImageProcessing();        $ImageProcessing->folder = '/upload/admin/banner/'.$this->id;                //delete all old images before resize        if($oldBlogFileName)        {            if($this->large_image != $oldBlogFileName)                $ImageProcessing->delete($ImageProcessing->folder.'/'.$oldBlogFileName);                foreach (self::$aSizeBannerTop as $key=>$value)                {                    $ImageProcessing->delete($ImageProcessing->folder.'/'.$key.'/'.$oldBlogFileName);                }                $ImageProcessing->file = $this->large_image;                $ImageProcessing->thumbs = self::$aSizeBannerTop;    //resize Of banner                $ImageProcessing->create_thumbs();                        }        else{                $ImageProcessing->file = $this->large_image;                $ImageProcessing->thumbs = self::$aSizeBannerTop;    //resize Of banner                $ImageProcessing->create_thumbs();         }    }//    public function resizeBanner($oldBlogFileName = null)//    {//        $ImageProcessing = new ImageProcessing();//        $ImageProcessing->folder = '/upload/admin/banner/'.$this->id;//        //        //delete all old images before resize//        if($oldBlogFileName)//        {//            if($this->large_image != $oldBlogFileName)//                $ImageProcessing->delete($ImageProcessing->folder.'/'.$oldBlogFileName);//            //            if ($this->banner_type == TOP || $this->banner_type == BOTTOM) {//                foreach (self::$aSizeBannerTop as $key=>$value)//                {//                    $ImageProcessing->delete($ImageProcessing->folder.'/'.$key.'/'.$oldBlogFileName);//                }//                //                $ImageProcessing->file = $this->large_image;//                $ImageProcessing->thumbs = self::$aSizeBannerTop;    //resize Of banner//                $ImageProcessing->create_thumbs();                //            }//            else{//                foreach (self::$aSizeBannerMiddle as $key=>$value)//                {//                    $ImageProcessing->delete($ImageProcessing->folder.'/'.$key.'/'.$oldBlogFileName);//                }//                //                $ImageProcessing->file = $this->large_image;//                $ImageProcessing->thumbs = self::$aSizeBannerMiddle;    //resize Of banner//                $ImageProcessing->create_thumbs();                                //            }//        }//        else{//             if ($this->banner_type == TOP || $this->banner_type == BOTTOM) {//                $ImageProcessing->file = $this->large_image;//                $ImageProcessing->thumbs = self::$aSizeBannerTop;    //resize Of banner//                $ImageProcessing->create_thumbs(); //             }//             else{//                 $ImageProcessing->file = $this->large_image;//                $ImageProcessing->thumbs = self::$aSizeBannerMiddle;    //resize Of banner//                $ImageProcessing->create_thumbs();//             }//        }//    }    public static function getBannerHomePage(){                $criteria=new CDbCriteria;		$criteria->compare('t.status',1);                $criteria->compare('t.order',self::HOMEPAGE);                $criteria->order = 't.order_by ASC';                 return self::model()->findAll($criteria);    }     public static function getBannerOther($order){                $criteria=new CDbCriteria;                $order += 1;		$criteria->compare('t.status',1);                $criteria->addCondition('t.order_by = '.$order);                 return self::model()->find($criteria);    }    public static function deleteImage($model)    {        $model = Banners::model()->findByPk($model->id);                if(is_null($model) || empty($model->large_image))return;        $ImageProcessing = new ImageProcessing();        $ImageProcessing->folder = '/upload/admin/banner/'.$model->id;        $ImageProcessing->delete($ImageProcessing->folder.'/'.$model->large_image);                    foreach (Banners::$aSizeBannerTop as $key=>$value)            {                $ImageProcessing->delete($ImageProcessing->folder.'/'.$key.'/'.$model->large_image);            }    }  	/*    public static function getAdsBannerByType($type){        $criteria=new CDbCriteria;        $criteria->compare('t.status',1);        $criteria->compare('t.banner_type',$type);        $criteria->order = 't.created_date DESC';        $result = self::model()->find($criteria);        if($result) return $result;        return array();    }	*/     public static function getAdsBannerMiddle(){        $criteria=new CDbCriteria;        $criteria->compare('t.status',1);        $criteria->compare('t.banner_type',MIDDLE);        $criteria->order = 't.created_date DESC';//        $criteria->limit = $limit;        $result = self::model()->findAll($criteria);        if($result) return $result;        return array();    }    public static function getAdsBannerMiddleHome(){        $criteria=new CDbCriteria;        $criteria->compare('t.status',1);        $criteria->compare('t.banner_type',MIDDLE_HOME);        $criteria->order = 't.created_date DESC';//        $criteria->limit = $limit;        $result = self::model()->findAll($criteria);        if($result) return $result;        return array();    }    public static function getAdsBannerTopHome(){        $models = self::model()->findAll(array('condition'=>'status = 1 AND banner_type = '.TOP_HOME,'order'=>'created_date'));        return $models;    }	/*	 * Generate the filename corresponding to the dimension	 * Need to change the code when copy to another model	 * 	 * @author Lam Huynh	 */    protected function generateImagePath($width=null, $height=null) {        $paths = array(            Yii::getPathOfAlias('webroot'),			'upload/admin',            self::$folderUpload,            $this->id,            "{$width}x{$height}",            $this->large_image        );        if (!$width && !$height)            unset ($paths[4]);        return implode('/', $paths);    }    	/*	 * Generate the image url corresponding to the dimension	 * Need to change the code when copy to another model	 * 	 * @author Lam Huynh	 */	protected function generateImageUrl($width=null, $height=null) {        $paths = array(            Yii::app()->baseUrl,			'upload/admin',            self::$folderUpload,            $this->id,            "{$width}x{$height}",            $this->large_image        );        if (!$width && !$height)            unset ($paths[4]);        return implode('/', $paths);    }		/*	 * Save uploaded file from form submit	 * Need to change the property 'imageFile' and 'large_image' 	 *   when copy to another model.	 * 	 * @param CUploadedFile $imageFile	 * @author Lam Huynh	 */ 	public function saveImage() {		if (!$this->imageFile)			return;		$this->removeImage();		$this->large_image = $this->imageFile->getName();		$this->update('large_image');				$savePath = $this->generateImagePath();		if (!file_exists(dirname($savePath))) {			mkdir(dirname($savePath));		}		$this->imageFile->saveAs($savePath);	}		/*	 * @author Lam Huynh	 */	public function removeImage() {		if (is_file($this->generateImagePath()))			unlink($this->generateImagePath());	}	/*	 * Return the resized image url	 * 	 * @author Lam Huynh	 */    public function getImageUrl($width=null, $height=null) {        $this->resize($width, $height);        $imgFile = $this->generateImagePath($width, $height);        $imgUrl = $this->generateImageUrl($width, $height);        $noImageUrl = null;        return is_file($imgFile) ? $imgUrl : $noImageUrl;    }    	/*	 * Resize the model's image and save to disk	 * 	 * @author Lam Huynh	 * @param int $width width of destination image	 * @param int $height height of destination image	 * @param boolean $fit	 * If true, fill the gap in destination image with white padding 	 *     http://stackoverflow.com/questions/3050952/resize-an-image-and-fill-gaps-of-proportions-with-a-color	 * If false, crop the edge of source image to fill the dimension	 */    public function resize($width, $height, $fit=true) {		// check for if cached        $dstImg = $this->generateImagePath($width, $height);        if(is_file($dstImg)) return;                $srcImg = $this->generateImagePath();        if(!is_file($srcImg)) return;        		ImageHelper::resize($srcImg, $dstImg, $width, $height, array('fit'=>$fit));    }    	/*	 * Get image for display in home page slideshow	 * It's differ from getImageUrl method in the resize mode	 * 	 * @author Lam Huynh	 */    public function getSlideshowImageUrl($width=null, $height=null) {        $this->resize($width, $height, false);        $imgFile = $this->generateImagePath($width, $height);        $imgUrl = $this->generateImageUrl($width, $height);        $noImageUrl = null;        return is_file($imgFile) ? $imgUrl : $noImageUrl;    }    	/*	 * Return the resized image url in fill mode	 * 	 * @author Lam Huynh	 */    public function getImageUrl2($width=null, $height=null) {        $this->resize($width, $height, false);        $imgFile = $this->generateImagePath($width, $height);        $imgUrl = $this->generateImageUrl($width, $height);        $noImageUrl = null;        return is_file($imgFile) ? $imgUrl : $noImageUrl;    }    }