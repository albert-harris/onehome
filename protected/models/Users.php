<?php/** * This is the model class for table "{{_users}}". * * The followings are the available columns in table '{{_users}}': * @property string $id * @property string $email * @property string $password_hash * @property string $temp_password * @property string $first_name * @property string $last_name * @property string $first_char * @property integer $login_attemp * @property string $created_date * @property string $last_logged_in * @property string $ip_address * @property integer $role_id * @property integer $application_id * @property integer $approved_status * @property string $gender * @property string $area_code_id * @property string $phone * @property string $verify_code * @property string $temp_appointment * @property string $i_am_doctor * * The followings are the available model relations: * @property Appointment[] $appointments * @property Booking[] $bookings * @property Doctor[] $doctors * @property DoctorPictures[] $doctorPictures * @property DoctorSpecialty[] $doctorSpecialties * @property InsurancesAccept[] $insurancesAccepts */class Users extends CActiveRecord {    public $password;//    public $issubcriber;    public $areaCode;    public $areaCodeConfirm;    public $password_confirm;    public $mobile_confirm;    public $full_name;    public $username;    /* for change pass in admin */    public $md5pass; //current in db    public $currentpassword; //in form    public $newpassword;    public $confirm_email;    /* for change pass in admin */    public static $requestStatus = array('0' => 'Inactive',        '1' => 'Active',        '2' => 'Unapproved');    public static $gender = array(1 => 'Male', 0 => 'Female');    public static $typeImage = 'jpg,jpeg,gif,png';        const MAX_LENGTH_NAME = 50;    const MAX_LENGTH_NRIC = 50;    const MAX_LENGTH_CONTACT_NO = 50;    const MAX_LENGTH_POSTAL_CODE = 50;        /* ANH DUNG Mar 28, 2014 For some role of User */    const USER_VENDOR = 1;    const USER_PURCHASER = 2;    const USER_LANDLORD = 3;    const USER_TENANT = 4;    /* ANH DUNG Mar 28, 2014 For some role of User */        /* ANH DUNG Sep 04, 2014  */    public static $ACCOUNT_TYPE = array(        ROLE_LANDLORD => "Landlord",        ROLE_TENANT => "Tenant",        ROLE_REGISTER_MEMBER => "Register",        ROLE_AGENT => "Saleperson",    );    /* ANH DUNG Sep 04, 2014  */        /* ANH DUNG Oct 28, 2014  */    public static $USER_TYPE_DETAIL = array(        Users::USER_VENDOR => "Vendor",        Users::USER_PURCHASER => "Purchaser",        Users::USER_LANDLORD => "Landlord",        Users::USER_TENANT => "Tenant",    );    /* ANH DUNG Oct 28, 2014  */        const ID_TYPE_CITIZENSHIP = 1;    const ID_TYPE_SPR = 2;    const ID_TYPE_SP = 3;    const ID_TYPE_STUDENT_PASS = 4;    const ID_TYPE_OTHER = 5;        public static $ARR_ID_NOT_REQUIRED = array(Users::ID_TYPE_CITIZENSHIP, Users::ID_TYPE_SPR,Users::ID_TYPE_SP,Users::ID_TYPE_STUDENT_PASS);        public static $aIdType = array(        Users::ID_TYPE_CITIZENSHIP=>'Citizenship',        Users::ID_TYPE_SPR=>'SPR',        Users::ID_TYPE_SP=>'Employment Pass/ S Pass',        Users::ID_TYPE_STUDENT_PASS=>'Student Pass',        Users::ID_TYPE_OTHER=>'Others'    );    public static $TENANT_ID_TYPES = array(        1 => 'Singapore Citizen',		2 => 'Singapore Permanent Resident',		3 => 'Work Permit / S Pass / Employment Pass',		4 => 'Personalised Employment Pass / EntrePass',		5 => 'Passport',		6 => 'Registration of Company (ROC) / Unique Entity Number (UEN)',    );    public static $AllowFile = 'doc,docx,pdf,jpg,jpeg,png';    public static $folderUpload='upload/members';    public static $AllowFileAvatar = 'jpg,jpeg,png';        public $aTierManager;        public $TierManagerId;    public $autocomplete_user_name;// var for autocompete     public $ProAgentDistrict;//         public static $aSize = array(        '100x100' => array('width' => 100, 'height' => 100), // Fe  Dashboard Â» All Listing        '80x80' => array('width' => 80, 'height' => 80), // not sure        '66x65' => array('width' => 66, 'height' => 65), // at property detail FE    );        public static $aSizeLogo = array(        '106x75' => array('width' => 106, 'height' => 75), //         '86x75' => array('width' => 86, 'height' => 75), // at property detail FE    );        // Feb 11, 2015     public static $ACCOUNT_EMAIL_NOT_LOGIN = array(        ROLE_LANDLORD,        ROLE_TENANT,        ROLE_AGENT,    );    // Feb 11, 2015         public static function model($className = __CLASS__) {        return parent::model($className);    }        /**     * @return string the associated database table name     */    public function tableName() {        return '{{_users}}';    }    /**     * @return array validation rules for model attributes.     */    public function rules() {        return array(            // FE register- Jason            array('title, password_hash,phone, first_name, last_name,phone,email,password_confirm', 'required', 'on'=>'register'),            array('password_confirm', 'compare', 'compareAttribute'=>'password_hash','on'=>'register'),            array('email','unique',                'message'=>'Email already existed in our system. Please enter a different email.',                'on'=>'register'),            //array('email','checkEmailNormalSignup' ,'on'=>'register'),            array('email','email','on'=>'register'),            array('is_subscriber','boolean','on'=>'register'),//            array('phone',//                'match','pattern'=>'/^[0-9-]{'.PHONE_LENGTH_MIN.','.PHONE_LENGTH_MAX.'}$/i',//                'on'=>'register,myprofile',//                'message'=>'Phone is not valid'),            array('phone', 'length', 'on'=>'register, myprofile'),            array('phone', 'length',                'tooShort'=>'Phone is not valid',                'min'=>PHONE_LENGTH_MIN, 'on'=>'register, myprofile'),            array('password_hash','length', 'min'=>PASSW_LENGTH_MIN, 'max'=>PASSW_LENGTH_MAX,                'tooLong'=>'Password is too long (maximum is '.PASSW_LENGTH_MAX.' characters).',                'tooShort'=>'Password is too short (minimum is '.PASSW_LENGTH_MIN.' characters).',                'on'=>'register'),            array('first_name,last_name', 'length', 'max'=>100,'on'=>'register'),            array('email', 'length', 'max'=>MAX_LIMIT_EMAIL_ACCOUNT,'on'=>'register'),            // FE register- Jason            //FE Myprofile//            array('pass_expiry_date', 'required', 'on'=>'myprofile_tenant'),            array('pass_expiry_date', 'PassExpiryDateCheck', 'on'=>'myprofile_tenant'),            array('email_not_login, email', 'email'),            array('phone,nric_passportno_roc, title,country_id, first_name, last_name', 'required', 'on'=>'myprofile'),                        array('email_not_login, phone,nric_passportno_roc, title,country_id, first_name, last_name', 'required', 'on'=>'myprofile_agent'),            array('contact_no,email_not_login, nric_passportno_roc, id_type, first_name', 'required', 'on'=>'myprofile_admin, myprofile_tenant'),//            array('pass_expiry_date', 'required', 'on'=>'myprofile_tenant'),            array('password_confirm', 'compare', 'compareAttribute'=>'newpassword','on'=>'myprofile,myprofile_admin, myprofile_tenant'),            array('newpassword', 'length', 'min' => PASSW_LENGTH_MIN, 'max' => PASSW_LENGTH_MAX,                'tooLong' => 'Password is too long (maximum is ' . PASSW_LENGTH_MAX . ' characters).',                'tooShort' => 'Password is too short (minimum is ' . PASSW_LENGTH_MIN . ' characters).',                'on' => 'myprofile, myprofile_admin, myprofile_tenant'),            //FE Myprofile            //create account admin            array('first_name,username, email, last_name, gender', 'required', 'on' => 'createAdmin, editAdmin'),            array('password_hash, password_confirm', 'required', 'on' => 'createAdmin'),            array('password_hash', 'length', 'min' => 6, 'max' => 32, 'on' => 'createAdmin, editAdmin'),            array('password_confirm', 'compare', 'compareAttribute' => 'password_hash', 'on' => 'editAdmin,createAdmin'),            array('email', 'unique', 'message' => 'This email address is not available', 'on' => 'editAdmin,createAdmin,create,update'),            // ANH DUNG - BE create SUB account admin            array('role_id, first_name,username, email, last_name, gender', 'required', 'on' => 'createSubAdmin, editSubAdmin'),            array('password_hash, password_confirm', 'required', 'on' => 'createSubAdmin'),            array('password_hash', 'length', 'min' => 6, 'max' => 32, 'on' => 'createSubAdmin, editSubAdmin'),            array('password_confirm', 'compare', 'compareAttribute' => 'password_hash', 'on' => 'createSubAdmin, editSubAdmin'),            array('email', 'unique', 'message' => 'This email address is not available', 'on' => 'createSubAdmin, editSubAdmin'),            // ANH DUNG - BE create SUB account admin                        //BE change my password - Nguyen Dung            array('currentpassword', 'comparePassword', 'on' => 'changeMyPassword'),            array('newpassword, password_confirm', 'required', 'on' => "changeMyPassword"),            array('newpassword', 'length', 'min' => PASSW_LENGTH_MIN, 'max' => PASSW_LENGTH_MAX,                'tooLong' => 'Password is too long (maximum is ' . PASSW_LENGTH_MAX . ' characters).',                'tooShort' => 'Password is too short (minimum is ' . PASSW_LENGTH_MIN . ' characters).',                'on' => 'changeMyPassword'),            array('password_confirm', 'compare', 'compareAttribute' => 'newpassword', 'on' => 'changeMyPassword'),            //BE change my password - Nguyen Dung            array('email, password_hash, temp_password', 'length', 'max' => 250),            array('license, pass_expiry_date, nric_passportno_roc, id, address2, username, email, password_hash, temp_password, first_name, last_name, first_char, login_attemp, created_date, last_logged_in, ip_address, role_id, application_id, status, gender, address,phone, verify_code, area_code_id', 'safe'),            array('nric_passportno_roc,contact_no, postal_code, id_type, title,email_not_login, country_id, is_subscriber', 'safe'),            array('name_for_slug,gst, commission_schema_id, agent_cea,agent_company_name,agent_company_logo,ProAgentDistrict', 'safe'),            array('ic_number,full_name', 'safe'),                        // BE Landlord Apr 02, 2014 ANH DUNG            array('first_name, nric_passportno_roc,password_hash,password_confirm,id_type, contact_no, postal_code,address', 'required', 'on'=>'create_landlord'),            array('first_name, nric_passportno_roc,id_type, contact_no,postal_code,address', 'required', 'on'=>'update_landlord'),            array('nric_passportno_roc','unique',                'message'=>'NRIC/FIN/PP No already existed in our system. Please enter a different NRIC/FIN/PP No.',                'on'=>'create_landlord,update_landlord',                'criteria'=>array('condition'=>'`role_id`<>0 AND `role_id`<>'.ROLE_EXTERNAL_CO_BROKE.' AND `role_id` IS NOT NULL'),                ),            array('email_not_login','email','on'=>'create_landlord,update_landlord'),            array('password_confirm', 'compare', 'compareAttribute' => 'password_hash', 'on' => 'create_landlord,update_landlord'),            array('password_hash', 'length', 'min' => PASSW_LENGTH_MIN, 'max' => PASSW_LENGTH_MAX,                'tooLong' => 'Password is too long (maximum is ' . PASSW_LENGTH_MAX . ' characters).',                'tooShort' => 'Password is too short (minimum is ' . PASSW_LENGTH_MIN . ' characters).',                'on' => 'create_landlord,update_landlord'),                        // BE Landlord Apr 02, 2014 ANH DUNG                        // BE Tenant Apr 02, 2014 ANH DUNG//            array('expiration_date, first_name, nric_passportno_roc,password_hash,password_confirm,id_type,pass_expiry_date, upload_employment_pass_passport,scanned_passport, email_not_login, contact_no,postal_code', 'required', 'on'=>'create_tenant'),// bk Jan 16, 2015            array('expiration_date, first_name, nric_passportno_roc,password_hash,password_confirm,id_type, email_not_login, contact_no,postal_code', 'required', 'on'=>'create_tenant'),            array('expiration_date, first_name, nric_passportno_roc,id_type, email_not_login, contact_no,postal_code', 'required', 'on'=>'update_tenant'),            array('pass_expiry_date', 'PassExpiryDateCheck', 'on'=>'create_tenant,update_tenant'),            array('nric_passportno_roc','unique',                'message'=>'NRIC/FIN/PP No already existed in our system. Please enter a different NRIC/FIN/PP No.',                'on'=>'create_tenant,update_tenant',                'criteria'=>array('condition'=>'`role_id`<>0 AND `role_id`<>'.ROLE_EXTERNAL_CO_BROKE.' AND `role_id` IS NOT NULL'),                ),            array('email_not_login','email','on'=>'create_tenant,update_tenant'),            array('password_confirm', 'compare', 'compareAttribute' => 'password_hash', 'on' => 'create_tenant,update_tenant'),            array('password_hash', 'length', 'min' => PASSW_LENGTH_MIN, 'max' => PASSW_LENGTH_MAX,                'tooLong' => 'Password is too long (maximum is ' . PASSW_LENGTH_MAX . ' characters).',                'tooShort' => 'Password is too short (minimum is ' . PASSW_LENGTH_MIN . ' characters).',                'on' => 'create_tenant,update_tenant'),                                    array('upload_employment_pass_passport,scanned_passport', 'file','on'=>'create_tenant,update_tenant,myprofile_tenant',                'allowEmpty'=>true,                'types'=> self::$AllowFile,                'wrongType'=>Yii::t('lang', "Only ".self::$AllowFile." are allowed."),            ),                         array('avatar, agent_company_logo', 'file','on'=>'create_landlord,update_landlord,'                . 'create_tenant,update_tenant,'                . 'create_agent,update_agent',                'allowEmpty'=>true,                'types'=> self::$AllowFileAvatar,                'wrongType'=>Yii::t('lang', "Only ".self::$AllowFileAvatar." are allowed."),            ),             // BE Tenant Apr 02, 2014 ANH DUNG                        // BE Registered Users Apr 02, 2014 ANH DUNG            array('title, first_name, last_name,password_hash,password_confirm, email, phone', 'required', 'on'=>'create_register'),            array('title, first_name, last_name,email, phone', 'required', 'on'=>'update_register'),            array('email','unique',                'message'=>'Email already existed in our system. Please enter a different email',                'on'=>'create_register,update_register'),            array('email','email','on'=>'create_register,update_register'),            array('password_confirm', 'compare', 'compareAttribute' => 'password_hash', 'on' => 'create_register,update_register'),            array('password_hash', 'length', 'min' => PASSW_LENGTH_MIN, 'max' => PASSW_LENGTH_MAX,                'tooLong' => 'Password is too long (maximum is ' . PASSW_LENGTH_MAX . ' characters).',                'tooShort' => 'Password is too short (minimum is ' . PASSW_LENGTH_MIN . ' characters).',                'on' => 'create_register,update_register'),                        // BE Registered Users Apr 02, 2014 ANH DUNG                                    // BE Agent Users Apr 02, 2014 ANH DUNG            array('title, first_name, last_name,commission_schema_id,nric_passportno_roc, password_hash,password_confirm, phone', 'required', 'on'=>'create_agent'),            array('title, first_name, last_name,commission_schema_id,nric_passportno_roc, phone', 'required', 'on'=>'update_agent'),            array('nric_passportno_roc','unique',                'message'=>'NRIC/FIN/PP No already existed in our system. Please enter a different NRIC/FIN/PP No.',                'on'=>'create_agent,update_agent',                'criteria'=>array('condition'=>'`role_id`<>0 AND `role_id`<>'.ROLE_EXTERNAL_CO_BROKE.' AND `role_id` IS NOT NULL'),                ),            array('email','email','on'=>'create_agent,update_agent'),            array('password_confirm', 'compare', 'compareAttribute' => 'password_hash', 'on' => 'create_agent,update_agent'),            array('password_hash', 'length', 'min' => PASSW_LENGTH_MIN, 'max' => PASSW_LENGTH_MAX,                'tooLong' => 'Password is too long (maximum is ' . PASSW_LENGTH_MAX . ' characters).',                'tooShort' => 'Password is too short (minimum is ' . PASSW_LENGTH_MIN . ' characters).',                'on' => 'create_agent,update_agent'),                        // BE Agent Users Apr 02, 2014 ANH DUNG                                    // FE Agent Create Landlord new Transaction Apr 25, 2014 ANH DUNG                        array('email_not_login', 'unique',                'criteria'=>array('condition'=>"`role_id`<>0 AND `role_id` IS NOT NULL AND id<>'$this->id'"),                'message'=>'Email {value} already existed in our system. Please enter a different email.',                'on'=>'AgentAddLandlord'),                        array('email_not_login', 'email', 'on'=>'AgentAddLandlord'),            array('email_not_login', 'required', 'on'=>'AgentAddLandlord'),            // FE Agent Create Landlord new Transaction Apr 25, 2014 ANH DUNG                            //HTram August 21, 2015 : to check validate on some case depend on id_type//            array('pass_expiry_date,scanned_employment_pass,scanned_passport','PassExpiryDateCheck'),            			/* author Lam Huynh */			array('introduction,qualification,experience','safe'),        );    }    /**     * @return array relational rules.     */    public function relations() {        return array(            'area_code' => array(self::BELONGS_TO, 'AreaCode', 'area_code_id'),            'country' => array(self::BELONGS_TO, 'AreaCode', 'country_id'),            'rTierManager' => array(self::BELONGS_TO, 'Users', 'TierManagerId'),            'rAgentTierManager' => array(self::HAS_MANY, 'ProAgentTierManager', 'agent_id',                'on'=>'rAgentTierManager.type=1',//1: lÃ  loáº¡i tier manager cá»§a agent, 2:?                'order'=>'rAgentTierManager.type_tier',                ),            'rAgentTierManagerFirst' => array(self::HAS_ONE, 'ProAgentTierManager', 'agent_id',                'on'=>'rAgentTierManagerFirst.type=1 AND rAgentTierManagerFirst.type_tier=1',//1: lÃ  loáº¡i tier manager cá»§a agent, 2:?                'order'=>'rAgentTierManagerFirst.type_tier',                ),            'rCommissionSchema' => array(self::BELONGS_TO, 'ProCommission', 'commission_schema_id'),            'rAgentDistrict' => array(self::HAS_MANY, 'ProAgentDistrict', 'agent_id'),            'rRole' => array(self::BELONGS_TO, 'Roles', 'role_id'),        );    }    /**     * <Jason>     * <To check required if user choose id_type is EP or sPass     * @param type $attribute     * @param type $params     */    public function PassExpiryDateCheck($attribute, $params) {         $old_pass_expiry_date  = "" ;         $old_scanned_passport  = "" ;         $old_upload_employment_pass_passport  = "" ;         if($this->id){             $OldModel = self::model()->findByPk($this->id);             $old_pass_expiry_date = $OldModel->pass_expiry_date;             $old_scanned_passport = $OldModel->scanned_passport;             $old_upload_employment_pass_passport = $OldModel->upload_employment_pass_passport;         }        //        if ( ($this->id_type == Users::ID_TYPE_EP || $this->id_type == Users::ID_TYPE_SPASS )) {        if ( $this->id_type != '' && ( !in_array($this->id_type, Users::$ARR_ID_NOT_REQUIRED) )) {            if((trim($this->pass_expiry_date)=='' || $this->pass_expiry_date=='0000-00-00' || $this->pass_expiry_date==NULL )){                $label = $this->getAttributeLabel('pass_expiry_date');                $this->addError("pass_expiry_date", "$label  cannot be blank.");            }                        if(empty($this->scanned_passport)  && trim($old_scanned_passport) == "" ){                $label = $this->getAttributeLabel('scanned_passport');                $this->addError("scanned_passport", "$label  cannot be blank.");            }                        if(empty($this->upload_employment_pass_passport)  && trim($old_upload_employment_pass_passport) == "" ){                $label = $this->getAttributeLabel('upload_employment_pass_passport');                $this->addError("upload_employment_pass_passport", "$label  cannot be blank.");            }        }    }          /**     * @return array customized attribute labels (name=>label)     */    public function attributeLabels() {        $return =  array(            'id' => 'ID',            'email' => 'Email',            'email_not_login' => 'Email',            'email_confirm' => 'Confirm email',            'password_hash' => 'Password',            'password_confirm' => 'Confirm Password',            'temp_password' => 'Temp Password',            'first_name' => 'First Name',            'last_name' => 'Last Name',            'first_char' => 'First Char',            'login_attemp' => 'Login Attemp',            'created_date' => 'Created Date',            'last_logged_in' => 'Last Logged In',            'ip_address' => 'Ip Address',            'role_id' => 'Role',            'application_id' => 'Application',            'status' => 'Status',            'gender' => 'Gender',            'phone' => 'Phone',            'verify_code' => 'Verify Code',            'full_name' => 'Name',            'address' => 'Address',            'area_code_id' => 'Area Code',            'currentpassword' => 'Current Password',            'newpassword' => 'New password',            'company_name' => 'Company Name',            'nric_passportno_roc' => 'NRIC/FIN/PP No',            'contact_no' => 'Contact No',            'postal_code' => 'Postal Code',            'id_type' => 'ID Type',            'country_id' => 'Country',            'is_subscriber' => 'Subscriber Newsletter',            'TierManagerId' => 'Tier Manager',            'upload_employment_pass_passport' => 'Employment Pass',            'scanned_passport' => 'Scanned Passport',            'commission_schema_id' => 'Commission Scheme',            'agent_cea' => 'CEA',            'agent_company_name' => 'Company Name',            'agent_company_logo' => 'Company Logo',            'ProAgentDistrict' => 'Access Districts',            'gst' => 'GST',            'expiration_date' => 'Tenancy Expiration Date',            'view_count' => 'Number of Views',        );                $aCheckName = array('create_landlord','update_landlord','index_landlord','view_landlord',                'create_tenant','update_tenant','index_tenant','view_tenant', 'myprofile_tenant','myprofile_admin'            );        $aCheckAddress = array('create_landlord','update_landlord','index_landlord',            'view_landlord',            );        $aCheckTenant = array(                        'create_tenant','update_tenant','index_tenant','view_tenant',            );                        if(in_array($this->scenario, $aCheckName)){            $return['first_name'] = "Full Name";        }        if(in_array($this->scenario, $aCheckAddress)){            $return['address'] = "Correspondence Address";        }        if(in_array($this->scenario, $aCheckTenant)){            $return['address'] = "Residential Address";        }                return $return;    }    public function compareEmail($attribute, $params) {        if ($this->email_confirm != $this->email) {            $this->addError("email_confirm", "$this->email_confirm email is wrong.");        }    }    //bb    public function checkCurrentPassword($attribute, $params) {        if (!$this->hasErrors()) {                            if ($this->password_hash != md5(trim($this->currentpassword))) {                    $this->addError('currentpassword', 'Current password is wrong.');                }        }    }        public function comparePassword($attribute, $params) {        if (!$this->hasErrors()) {            if (trim($this->currentpassword) == '')                $this->addError('currentpassword', 'Current password cannot be blank.');            else {                //$tempPass = $this->currentpassword;                //$this->currentpassword = md5(trim($this->currentpassword));                if ($this->md5pass != md5(trim($this->currentpassword))) {                    $this->addError('currentpassword', 'Current password wrong.');                }                //$this->currentpassword = $tempPass;            }        }    }    public function search($criteria = NULL) {        if ($criteria == NULL)            $criteria = new CDbCriteria;        $criteria->compare('t.email', $this->email, true);        $criteria->compare('t.username', $this->username, true);        $criteria->compare('t.first_name', $this->first_name, true);        $criteria->compare('t.last_name', $this->last_name, true);        $criteria->compare('CONCAT(t.first_name, t.last_name)', $this->full_name, true);        $criteria->compare('t.created_date', $this->created_date, true);        $criteria->compare('t.ip_address', $this->ip_address, true);//		$criteria->compare('t.role_id',$this->role_id);        $criteria->addCondition('t.role_id <> 2');        $criteria->compare('t.application_id', $this->application_id);        $criteria->compare('t.status', $this->status);        $criteria->compare('t.phone', $this->phone, true);        //		$criteria->order = "t.first_name asc, t.last_name asc";        $criteria->order = "t.created_date desc";        /**         * <Jason>         * <Date: 20131002>         * <To export excel for all members>         */        $_SESSION['data_user-excel'] // for retrive all items                = new CActiveDataProvider($this, array(            'pagination' => false,            'criteria' => $criteria,        ));        return new CActiveDataProvider($this, array(            'criteria' => $criteria,             'pagination'=>array(                'pageSize'=> Yii::app()->user->getState('pageSize',Yii::app()->params['defaultPageSize']),            ),        ));    }        /**     * @Author: ANH DUNG Apr 02, 2014     * @Todo: search user Landlord, tenant, register user, agent at BE     */        public function searchForProperty($criteria = NULL) {        if ($criteria == NULL)            $criteria = new CDbCriteria;        $criteria->compare('t.first_name', $this->first_name, true);        $criteria->compare('t.last_name', $this->last_name, true);        $criteria->compare('t.role_id',$this->role_id);        $criteria->compare('t.application_id', $this->application_id);        $criteria->compare('CONCAT(t.first_name," ", t.last_name)', $this->full_name, true);        $criteria->compare('t.status', $this->status);        $criteria->compare('t.address', $this->phone, true);        $criteria->compare('t.email_not_login', $this->email_not_login, true);        $criteria->compare('t.contact_no', $this->contact_no, true);        $criteria->compare('t.id_type', $this->id_type);        $criteria->compare('t.nric_passportno_roc', $this->nric_passportno_roc, true);//        $criteria->order = "t.id desc";        $sort = new CSort();        $sort->attributes = array(            'id'=>'id',            'first_name'=>'first_name',            'full_name' => array(                'asc' => 'CONCAT(first_name, last_name)',                'desc' => 'CONCAT(first_name, last_name) desc',            ),            'nric_passportno_roc'=>'nric_passportno_roc',            'id_type'=>'id_type',            'email'=>'email',            'email_not_login'=>'email_not_login',            'address'=>'address',            'status'=>'status',            'gst'=>'gst',            'contact_no'=>'contact_no',                        'email_click'=>'email_click',                        'phone_click'=>'phone_click',                        'view_count'=>'view_count',                        );                $sort->defaultOrder = 't.id DESC';                  $_SESSION['data_user-excel'] // for retrive all items                = new CActiveDataProvider($this, array(            'pagination' => false,            'criteria' => $criteria,                    'sort' => $sort,        ));        return new CActiveDataProvider($this, array(            'criteria' => $criteria,             'pagination'=>array(                'pageSize'=> Yii::app()->user->getState('pageSize',Yii::app()->params['defaultPageSize']),            ),            'sort' => $sort,                    ));    }    public function searchAdmin($criteria = NULL) {        if ($criteria == NULL)            $criteria = new CDbCriteria;        $criteria->compare('t.username', $this->username, true);        $criteria->compare('t.email', $this->email, true);        $criteria->compare('t.first_name', $this->first_name, true);        $criteria->compare('t.last_name', $this->last_name, true);        $criteria->compare('t.created_date', $this->created_date, true);        $criteria->compare('t.role_id', $this->role_id);        $criteria->compare('t.application_id', 1);        $criteria->compare('t.status', $this->status);        $criteria->compare('t.phone', $this->phone, true);        return new CActiveDataProvider($this, array(            'criteria' => $criteria,        ));    }        public function searchSubAdmin($criteria = NULL) {        if ($criteria == NULL)            $criteria = new CDbCriteria;        $criteria->compare('t.username', $this->username, true);        $criteria->compare('t.email', $this->email, true);        $criteria->compare('t.first_name', $this->first_name, true);        $criteria->compare('t.last_name', $this->last_name, true);        $criteria->compare('t.created_date', $this->created_date, true);        $criteria->compare('t.role_id', $this->role_id);        $criteria->compare('t.application_id', 1);//        $criteria->addCondition('t.role_id<>2');        $criteria->addNotInCondition('t.role_id', array(ROLE_MANAGER, ROLE_ADMIN));        $criteria->compare('t.status', $this->status);        $criteria->compare('t.phone', $this->phone, true);        return new CActiveDataProvider($this, array(            'criteria' => $criteria,        ));    }    public function defaultScope() {        return array(                //'condition'=>'',        );    }    public function unlinkAllFileInFolder($path) {        $files = glob($path . '/*'); // get all file names        foreach ($files as $file) { // iterate files            if (is_file($file))                unlink($file); // delete file        }    }    public function beforeDelete() {        try {            self::removeFile($this, 'upload_employment_pass_passport', self::$folderUpload);            self::deleteImage($this, 'avatar', Users::$aSize);            self::deleteImage($this, 'agent_company_logo', Users::$aSizeLogo);        } catch (Exception $ex) {            echo $ex->getMessage();            die;        }        return parent::beforeDelete();    }        /**     * @Author: ANH DUNG Apr 01, 2014     * @Todo: some process something before save      */           protected function beforeSave() {        $this->name_for_slug = $this->first_name." ".$this->last_name;        if($this->scenario=='create_tenant'                || $this->scenario=='update_tenant'            ){            if(strpos($this->pass_expiry_date, '/')){                $this->pass_expiry_date = MyFormat::dateConverDmyToYmd($this->pass_expiry_date);            }            if(strpos($this->expiration_date, '/')){                $this->expiration_date = MyFormat::dateConverDmyToYmd($this->expiration_date);            }                    }                        return parent::beforeSave();    }        /**     * @Author: ANH DUNG Apr 01, 2014     * @Todo: some process something after save      */             protected function afterSave() {        // for subscriber check        if($this->isNewRecord){            if($this->is_subscriber){                Subscriber::saveSubscriberUser($this->id);            }        }else{            Subscriber::updateSubscriberUser($this->id);        }        // for subscriber check                return parent::afterSave();    }    public function activate() {        $this->status = 1;        $this->update(array('status'));    }    public function deactivate() {        $this->status = 0;        $this->update(array('status'));    }    public function behaviors() {        return array(//            'LoggableBehavior' => 'application.modules.auditTrail.behaviors.LoggableBehavior',            'sluggable' => array(                    'class' => 'application.extensions.mintao-yii-behavior-sluggable.SluggableBehavior',                    'columns' => array('name_for_slug'),                    'unique' => true,                    'update' => true,            ),         );    }        public static function save_upload_employment_pass_passport($model){        if(!is_null($model->upload_employment_pass_passport)){            $model->upload_employment_pass_passport = self::saveFile($model, 'upload_employment_pass_passport', self::$folderUpload, 1);            $model->update(array('upload_employment_pass_passport'));                    }        return $model->upload_employment_pass_passport;    }        public static function save_scanned_passport($model){        if(!is_null($model->scanned_passport)){            $model->scanned_passport = self::saveFile($model, 'scanned_passport', self::$folderUpload, 2);            $model->update(array('scanned_passport'));                    }        return $model->scanned_passport;    }        /**     * @Author: ANH DUNG Apr 24, 2014     * @Todo: save two file upload of tenant from create new transaction     * @Param: $mUser model user     * @Param: $mProTransactionsVendorPurchaserDetail model ProTransactionsVendorPurchaserDetail     * two field: scanned_employment_pass, scanned_passport     */    public static function saveTwoFileOfTenant($mUser, $mProTransactionsVendorPurchaserDetail){        $imageProcessing = new ImageProcessing();        $imageProcessing->createDirectoryByPath(self::$folderUpload.'/'.$mUser->id);        $fileFolder = ProTransactionsVendorPurchaserDetail::$folderUpload;        $fileModelId = $mProTransactionsVendorPurchaserDetail->id;        $pathSaveFile = "/".self::$folderUpload."/$mUser->id";        if(!empty($mProTransactionsVendorPurchaserDetail->scanned_employment_pass)){            $fileName = $mProTransactionsVendorPurchaserDetail->scanned_employment_pass;            $url_download = Yii::app()->createAbsoluteUrl('/')."/$fileFolder/$fileModelId/$fileName";            MyFormat::DownloadFile($url_download, $pathSaveFile, $fileName);            $mUser->upload_employment_pass_passport = $fileName;        }        if(!empty($mProTransactionsVendorPurchaserDetail->scanned_passport)){            $fileName = $mProTransactionsVendorPurchaserDetail->scanned_passport;            $url_download = Yii::app()->createAbsoluteUrl('/')."/$fileFolder/$fileModelId/$fileName";            MyFormat::DownloadFile($url_download, $pathSaveFile, $fileName);            $mUser->scanned_passport = $fileName;                    }        $mUser->update(array('upload_employment_pass_passport', 'scanned_passport'));                }            /**     * @Author: ANH DUNG Apr 24, 2014     * @Todo: copy two file upload of user tenant to table ProTransactionsVendorPurchaserDetail of transaction     * @Param: $mUser model user     * @Param: $mProTransactionsVendorPurchaserDetail model ProTransactionsVendorPurchaserDetail     * two field: scanned_employment_pass, scanned_passport     */    public static function copyTwoFileFromUserToTenant($mUser, $mProTransactionsVendorPurchaserDetail){        $fileFolder = ProTransactionsVendorPurchaserDetail::$folderUpload;        $fileModelId = $mProTransactionsVendorPurchaserDetail->id;        $imageProcessing = new ImageProcessing();        $imageProcessing->createDirectoryByPath($fileFolder.'/'.$fileModelId);        $pathSaveFile = "/".$fileFolder."/$fileModelId";        $UserFolder = self::$folderUpload;        $Uid = $mUser->id;        if(!empty($mUser->upload_employment_pass_passport)){            $fileName = $mUser->upload_employment_pass_passport;            $url_download = Yii::app()->createAbsoluteUrl('/')."/$UserFolder/$Uid/$fileName";            MyFormat::DownloadFile($url_download, $pathSaveFile, $fileName);            $mProTransactionsVendorPurchaserDetail->scanned_employment_pass = $fileName;        }        if(!empty($mUser->scanned_passport)){            $fileName = $mUser->scanned_passport;            $url_download = Yii::app()->createAbsoluteUrl('/')."/$UserFolder/$Uid/$fileName";            MyFormat::DownloadFile($url_download, $pathSaveFile, $fileName);            $mProTransactionsVendorPurchaserDetail->scanned_passport = $fileName;                    }        $mProTransactionsVendorPurchaserDetail->update(array('scanned_employment_pass', 'scanned_passport'));                }                 /**     * Apr 01, 2014 - ANH DUNG     * To do: save file      * @param: $model model user     * @param: $nameField ex: file_name     * @param: $pathUpload ex: 'upload/members'       * @return: name of image     */    public static function  saveFile($model, $nameField, $pathUpload, $count)    {        if(is_null($model->$nameField)) return '';            $ext = $model->$nameField->getExtensionName();        $fileName = MyFunctionCustom::slugify($model->$nameField->getName());        $fileName = str_replace(strtolower($ext), '', $fileName);        $fileName = trim($fileName, '-');        $fileName = trim($fileName);        $fileName = $fileName.'-'.time().$count.'.'.$ext;//        $fileName = $fileName.'.'.$ext;        $imageProcessing = new ImageProcessing();        $imageProcessing->createDirectoryByPath($pathUpload.'/'.$model->id);        $model->$nameField->saveAs($pathUpload.'/'.$model->id.'/'.$fileName);        return $fileName;    }                 /**     * Apr 01, 2014 - ANH DUNG     * To do: delete file  of model user     * @param: $model Users     * @param: $nameField ex: upload_employment_pass_passport     * @param: $pathUpload ex: 'upload/members'       */        public static function deleteOldFile($model, $nameField, $pathUpload)    {        $modelDel = self::model()->findByPk($model->id);        if(is_null($modelDel) || empty($modelDel->$nameField))return;        self::removeFile($modelDel, $nameField, $pathUpload);    }             /**     * @Author: ANH DUNG  Apr 02, 2014     * @Todo: only remove file of user     * @Param: $modelDel is model Users          * @Param: $nameField field file in model user     */    public static function removeFile($modelDel, $nameField, $pathUpload){        if(trim($modelDel->$nameField)=='') return;        $ImageProcessing = new ImageProcessing();        $ImageProcessing->folder = '/'.$pathUpload.'/'.$modelDel->id;        $ImageProcessing->delete($ImageProcessing->folder.'/'.$modelDel->$nameField);            }                public function getInforUser($id = null, $name = null) {        /**         * Get information user         */        $id = (int) $id;        $name = trim($name);        if (empty($id))            return;        if (!empty($name))            $result = Users::model()->findByPk($id)->$name;        else            $result = Users::model()->findByPk($id);        return $result;    }    public static function loadItems($emptyOption = false) {        $_items = array();        if ($emptyOption)            $_items[""] = "";        $model = self::model()->findByPk(Yii::app()->user->getId());        //foreach($models as $model)        $_items[$model->id] = $model->email;        return $_items;    }    public static function generateKey($user) {        if (empty($user->email))            $user->email = '';        return md5($user->id . $user->email);    }    public static function findByVerifyCode($verify_code) {        return Users::model()->find('verify_code=' . $verify_code . '');    }    public function checkDigit($attribute, $params) {        if ($this->password_hash != '') {//            $containsDigit   = preg_match('/\d/',$this->password_hash);            $containsDigit = preg_match('/[A-Za-z].*[0-9]|[0-9].*[A-Za-z]/', $this->password_hash);            $lb = $this->getAttributeLabel('password_hash');            if (!$containsDigit)                $this->addError("password_hash", "$lb must be at least one letter and one number.");        }    }    public function checkDigit_new($attribute, $params) {        if ($this->newpassword != '') {//            $containsDigit   = preg_match('/\d/',$this->password_hash);            $containsDigit = preg_match('/[A-Za-z].*[0-9]|[0-9].*[A-Za-z]/', $this->newpassword);            $lb = $this->getAttributeLabel('newpassword');            if (!$containsDigit)                $this->addError("newpassword", "$lb must be at least one letter and one number.");        }    }                /**     * @Author: ANH DUNG Apr 25, 2014     * @Todo: validate email of landlord and tenant     * @Param: $model  model ProTransactionsVendorPurchaserDetail     */        public static function validateDefaultTenant($model){        if(empty($model->user_id)){            $mUser = new Users('AgentAddLandlord');            $mUser->email_not_login = $model->email;            $mUser->nric_passportno_roc = $model->nric_passportno_roc;            $mUser->validate(array('email_not_login','nric_passportno_roc'));                        if($mUser->hasErrors()){                if( trim($mUser->email_not_login) != '' && $mUser->getError('email_not_login')){                    $model->addError('email', $mUser->getError('email_not_login'));                }                if($mUser->getError('nric_passportno_roc')){                    $model->addError('nric_passportno_roc', $mUser->getError('nric_passportno_roc'));                }            }        }    }        /**     * @Author: ANH DUNG Apr 25, 2014     * @Todo: validate email of landlord and tenant     * @Param: $model  model ProTransactionsVendorPurchaserDetail     */        public static function validateEmailLandlordTenant($model){        $mUser = new Users('AgentAddLandlord');        if(!empty($model->user_id))            $mUser->id = $model->user_id;        $mUser->email_not_login = $model->email;        $mUser->nric_passportno_roc = $model->nric_passportno_roc;        $mUser->validate(array('email_not_login','nric_passportno_roc'));                    if($mUser->hasErrors()){            if($mUser->getError('email_not_login')){//                $model->addError('email', $mUser->getError('email_not_login'));            }            if($mUser->getError('nric_passportno_roc')){                $model->addError('nric_passportno_roc', $mUser->getError('nric_passportno_roc'));            }        }    }        /**     * @Author: ANH DUNG Mar 28, 2014     * @Todo: save user form model ProTransactionsVendorPurchaserDetail     * @Param: $model is model ProTransactionsVendorPurchaserDetail     * @Return: model user     */    public static function saveUserVendorPurchaser($model, $role_id){        $mUser = new Users();        $mUser->scenario = 'abcdef';        $mUser->first_name = $model->name;        $mUser->email_not_login = $model->email;        $mUser->nric_passportno_roc = $model->nric_passportno_roc;        $mUser->contact_no = $model->contact_no;        $mUser->address = $model->address;        $mUser->postal_code = $model->postal_code;        $mUser->pass_expiry_date = $model->pass_expiry_date;        $mUser->id_type = $model->id_type;//        $mUser->role_id = $role_id;        $mUser->status = STATUS_ACTIVE;        $mUser->application_id = FE;        $mUser->temp_password = ActiveRecord::randString();        $mUser->password_hash = md5($mUser->temp_password);        $mUser->save();        return $mUser;    }            public static function saveUserExternalCoBroke($model, $role_id){        $mUser = null;        if(!empty($model->user_id)){            $mUser = self::model()->findByPk($model->user_id);        }        if(is_null($mUser))            $mUser = new Users();        $mUser->scenario = null;        $mUser->agent_company_name = $model->company_name;        $mUser->first_name = $model->salesperson_name;        if(trim($mUser->first_name) == '' && $model->type == ProTransactionsBillTo::TYPE_VENDOR_PURCHASER){            $mUser->first_name = $model->attn_to;        }        $mUser->nric_passportno_roc = $model->nric_no;        $mUser->contact_no = $model->contact_no;        $mUser->address = $model->billing_address;        $mUser->postal_code = $model->postal_code;        $mUser->status = STATUS_INACTIVE;        $mUser->application_id = FE;        $mUser->role_id = $role_id;        $mUser->save();        return $mUser;    }        /**     * @Author: ANH DUNG Apr 28, 2014     * @Todo: copy info update from form model ProTransactionsVendorPurchaserDetail to user      * @Param: $model is model ProTransactionsVendorPurchaserDetail     * @Return: model user     */    public static function updateUserVendorPurchaser($model){        $mUser = Users::model()->findByPk($model->user_id);        if(is_null($mUser) || $model->is_new_user==0 ) return ;        $mUser->scenario = null;        $mUser->first_name = $model->name;        $mUser->email_not_login = $model->email;        $mUser->nric_passportno_roc = $model->nric_passportno_roc;        $mUser->contact_no = $model->contact_no;        $mUser->address = $model->address;        $mUser->postal_code = $model->postal_code;        $mUser->pass_expiry_date = $model->pass_expiry_date;        $mUser->id_type = $model->id_type;//        $mUser->role_id = $role_id;        $aUpdate = array('first_name', 'email_not_login', 'nric_passportno_roc', 'contact_no',                'address', 'postal_code', 'pass_expiry_date', 'id_type'                );        $mUser->update($aUpdate);    }            /**     * @Author: ANH DUNG Feb 02, 2015     * @Todo: copy info update from form model ProTransactionsVendorPurchaserDetail to user      * @Param: $model is model ProTransactionsVendorPurchaserDetail     * @Return: model user     */    public static function UpdateUserVendorPurchaserOnly($model){        $mUser = Users::model()->findByPk($model->user_id);        if(is_null($mUser)) return ;        $mUser->scenario = null;        $mUser->first_name = $model->name;        $mUser->email_not_login = $model->email;        $mUser->nric_passportno_roc = $model->nric_passportno_roc;        $mUser->contact_no = $model->contact_no;        $mUser->address = $model->address;        $mUser->postal_code = $model->postal_code;        $mUser->pass_expiry_date = $model->pass_expiry_date;        $mUser->id_type = $model->id_type;//        $mUser->role_id = $role_id;        $aUpdate = array('first_name', 'email_not_login', 'nric_passportno_roc', 'contact_no',                'address', 'postal_code', 'pass_expiry_date', 'id_type'                );        $mUser->update($aUpdate);    }             public function search_subscriber() {               $criteria = new CDbCriteria;        $criteria->compare('t.email', $this->email, true);//        $criteria->compare('t.first_name', $this->full_name, true);//        $criteria->compare('t.last_name', $this->full_name, true);//        $criteria->addCondition('t.first_name LIKE "%'.$this->full_name.'%" OR t.last_name LIKE "%'.$this->full_name.'%"');        $criteria->compare('t.application_id', 2);        $criteria->compare('t.is_subscriber', 1);        $criteria->order = "t.created_date desc";        return new CActiveDataProvider($this, array(            'criteria' => $criteria,             'pagination'=>array(                'pageSize'=> Yii::app()->user->getState('pageSize',Yii::app()->params['defaultPageSize']),            ),        ));    }            /**     * @Author: ANH DUNG Apr 08, 2014     * @Todo: save avatar of user     * @Param: $mUser model user     * $folderUpload='upload/members';       * @Return: name file upload     */    public static function saveImage($model, $fieldName) {        if (is_null($model->$fieldName))            return '';        $ext = $model->$fieldName->getExtensionName();        $fileName = time() . '.' . $ext;        if($fieldName=='agent_company_logo')            $fileName = time() . '1.' . $ext;        $ImageHelper = new ImageHelper();        $ImageHelper->createDirectoryByPath(self::$folderUpload. '/' . $model->id . '/avatar');                $model->$fieldName->saveAs(self::$folderUpload. '/' . $model->id . '/avatar/' . $fileName);        return $fileName;    }    /*     * @Author: ANH DUNG Apr 08, 2014     * To do: resize avatar     */    public static function resizeImage($model, $fieldName, $aSize) {        $ImageHelper = new ImageHelper();             $ImageHelper->folder = '/'.self::$folderUpload.'/' . $model->id. '/avatar';        $ImageHelper->file = $model->$fieldName;        $ImageHelper->aRGB = array(0, 0, 0);//full black background        $ImageHelper->thumbs = $aSize;//        $ImageHelper->createFullImage = true;        $ImageHelper->createThumbs();            }    /*     * @Author: ANH DUNG Apr 08, 2014     * To do: delete avatar     */    public static function deleteImage($model, $fieldName, $aSize) {        self::RemoveUserImage($model, $fieldName, $aSize);//        self::RemoveFile($model, 'agent_company_logo', self::$aSizeLogo );    }            /*     * @Author: ANH DUNG May 07, 2014     * To do: delete avatar, agent_company_logo     * @param: $model model user     * @param: $nameField is avatar, agent_company_logo     * @param: $aSize     */    public static function RemoveUserImage($model, $nameField, $aSize) {        $modelCat = self::model()->findByPk($model->id);        if (is_null($modelCat) || empty($modelCat->$nameField))            return;        $ImageHelper = new ImageHelper();             $ImageHelper->folder = '/'.self::$folderUpload.'/' . $modelCat->id. '/avatar';        $ImageHelper->deleteFile($ImageHelper->folder . '/' . $modelCat->$nameField);        foreach ( $aSize as $key => $value) {            $ImageHelper->deleteFile($ImageHelper->folder . '/' . $key . '/' . $modelCat->$nameField);        }            }    /*     * @Author: ANH DUNG May 20, 2014     * To do: cáº­p nháº­t ngÃ y háº¿t háº¡n cho tenant     * @param: $uid model user     * @param: $uid is 2014-05-20     */    public static function updateExpirationDate($uid, $new_expiration_date){        $model = Users::model()->findByPk($uid);        if($model){            if(empty($model->expiration_date) || $model->expiration_date=='0000-00-00'){                $model->expiration_date = $new_expiration_date;                $model->update(array('expiration_date'));            }else{                if(MyFormat::compareTwoDate($new_expiration_date, $model->expiration_date)){                    $model->expiration_date = $new_expiration_date;                    $model->update(array('expiration_date'));                }            }        }    }    /**     * @Author: ANH DUNG Jul 04, 2014     * @Todo: láº¥y model scheme cá»§a uid     * @Param: $uid     * @Return: model scheme     */   public static function getModelSchemeByUid($uid, &$mSaleperson){       $model = self::model()->findByPk($uid);       if($model){           $mSaleperson = $model;           return ProCommission::model()->findByPk($model->commission_schema_id);       }       return null;   }    /**     * @Author: ANH DUNG Jul 16, 2014     * @Todo: get gst cá»§a user     * @Param: $uid     * @Return: number gst     */   public static function getGst($uid){       $model = self::model()->findByPk($uid);       if($uid && $model){           if($model->gst)                return Yii::app()->params['gst'];       }       return 0;   }       /**     * @Author: ANH DUNG Jul 17, 2014     * @Todo: get list model cá»§a user by list id pk     * @Param: $aUid array pk     */   public static function getModelByListUid($aUid){       $criteria = new CDbCriteria();       $criteria->addInCondition('t.id', $aUid);       $aRes = array();       $models = self::model()->findAll($criteria);       foreach($models as $item){           $aRes[$item->id] = $item;       }       return $aRes;   }      /**     * @Author: ANH DUNG Sep 17, 2014     * @Todo: get model by slug     * @Param: $slug     */   public static function findBySlug($slug) {        if(empty($slug)) return null;        $criteria = new CDbCriteria;        $criteria->compare('slug', $slug);        return static::model()->find($criteria);    }       /**     * @Author: ANH DUNG Aug 18, 2014     * @Todo: get Agent License No. of saleperson     * @Param: $uid pk, $fieldName     */   public static function getFieldNameByPk($uid, $fieldName){       $model = self::model()->findByPk($uid);       if($model){           return $model->$fieldName;       }       return '';   }      public static function getCommissionSchemeText($uid){       $model = self::model()->findByPk($uid);       if($model){           return $model->rCommissionSchema?$model->rCommissionSchema->name:"";       }       return '';   }       /**     * @Author: ANH DUNG Sep 04, 2014     * @Todo: display full name of user     * @Param: $id user     * @Return: full name with salution of user     */    public static function getFullNameById($pk){        $mUser = Users::model()->findByPk($pk);        if($mUser){            $cmsFormater = new CmsFormatter();            return $cmsFormater->formatFullNameRegisteredUsers($mUser);        }        return '';    }        /**     * @Author: ANH DUNG Sep 04, 2014     * @Todo: display account type of user     * @Param: $role_id of user     */    public static function getAccountType($role_id){        if(isset(Users::$ACCOUNT_TYPE[$role_id])){            return Users::$ACCOUNT_TYPE[$role_id];        }        return '';    }        /**     * @Author: ANH DUNG Dec 02, 2014     * @Todo: Tenancy expiring - system will send email to LL,Tenant, Agent and Admin      * on the date when exact date 3 months before expiring.     * @Param: $model     * for sql test: SELECT * FROM `pro_users` WHERE expiration_date < DATE_ADD(CURDATE(), INTERVAL 1 MONTH)        ORDER BY `pro_users`.`expiration_date`  ASC     *///    public static function GetListTenancyExpiring() {//        $month_expiry_alert = Yii::app()->params['month_expiry_alert'];//        $criteria =new CDbCriteria;//        $criteria->addCondition(" expiration_date = DATE_ADD(CURDATE(), INTERVAL $month_expiry_alert MONTH) ");//        return self::model()->findAll($criteria);//    }        /**     * @Author: ANH DUNG Dec 02, 2014     * Tenancy: há»£p Äá»ng thuÃª nhÃ      * @Todo: cron  send email to LL,Tenant, Agent and Admin      * on the date when exact date 3 months before expiring.     * láº¥y nhá»¯ng transaction ( Tenancy lÃ  há»£p Äá»ng thue nhÃ ) dc approved vÃ  sáº¯p háº¿t háº¡n trong 3 thÃ¡ng vÃ  send mail     *///    public static function CronSendMailTenancyExpiring() {//        /* 1. get list tenant 3 months later will expiring.//         * Users::GetListTenancyExpiring()//         * 2. foreach and send with email template//         * 2.1 each model Tenant => get list email of LL,Tenant, Agent and Admin//         */        //    }        /**    * @Author: ANH DUNG Jan 09, 2015    * @Todo: resize avatar and company logo of all saleperson    */    public static function FixResizeAllAvataCompanySaleperson(){        $criteria = new CDbCriteria();        $criteria->compare("t.role_id", ROLE_AGENT);        $models = Users::model()->findAll($criteria);        foreach($models as $model){            Users::resizeImage($model, 'avatar', Users::$aSize);            Users::resizeImage($model, 'agent_company_logo', Users::$aSizeLogo);        }        echo count($models)." Done";die;    }        /**     * @Author: ANH DUNG Jan 21, 2015     * @Todo: Put an alert for Tenant 1 month before employment pass expires.     */    public static function CronTenantEmploymentPassExpire() {        $aModelTenant = self::GetTenantHaveEmploymentPassExpire();        foreach( $aModelTenant as $mUser ){            if( trim($mUser->email_not_login) != "" ){                SendEmail::MailToTenantEmploymentPassExpire($mUser);            }        }    }        /**      @Author: ANH DUNG Jan 21, 2015     * @Todo: get All tenant with employment pass expires in 1 month      */    public static function GetTenantHaveEmploymentPassExpire() {        $month = 1;        $criteria =new CDbCriteria;        $criteria->compare('t.role_id', ROLE_TENANT);        $criteria->addCondition(" t.pass_expiry_date = DATE_ADD(CURDATE(), INTERVAL $month MONTH) ");                return self::model()->findAll($criteria);    }        /**     * @Author: ANH DUNG Feb 11, 2015     * @Todo: validate email landlord and tenant when approve transaction     * @Param: $user_id     * @Param: $email     * @Param: $nric_passportno_roc     */    public static function CheckExistsUser($user_id, $email, $nric_passportno_roc) {                $email = trim($email);        $nric_passportno_roc = trim($nric_passportno_roc);        $criteria =new CDbCriteria;        $criteria->addInCondition('t.role_id', Users::$ACCOUNT_EMAIL_NOT_LOGIN);        $criteria->addCondition('t.email_not_login IS NOT NULL AND t.email_not_login<>"" ');        $criteria->addNotInCondition('t.id',  array($user_id) );//        $criteria->compare('t.email_not_login', trim($email));//        $criteria->compare('t.nric_passportno_roc', trim($nric_passportno_roc));                $criteria->addCondition("t.email_not_login ='$email' OR t.nric_passportno_roc='$nric_passportno_roc' ");        return Users::model()->find($criteria);    }	/*	 * @author Lam Huynh	 */	public function resizeAvatar($width, $height) {		$dstImg = $this->generateAvatarPath($width, $height);		if(is_file($dstImg)) return;		$srcImg = $this->generateAvatarPath();		if(!file_exists($srcImg)) return;		if(!file_exists(dirname($dstImg))) 			mkdir(dirname($dstImg));		$newWidth = $width;		$newHeight = $height;		list($oldWidth, $oldHeight, $image_type) = getimagesize($srcImg);		switch ($image_type) {			case 1: 				$old = imagecreatefromgif($srcImg); 				break;			case 2: 				$old = imagecreatefromjpeg($srcImg);  				break;			case 3: 				$old = imagecreatefrompng($srcImg); 				break;			default: 				return;  				break;		}			$new = imagecreatetruecolor($newWidth, $newHeight);		$white = imagecolorallocate($new, 255, 255, 255);		imagefill($new, 0, 0, $white);		if (($oldWidth / $oldHeight) >= ($newWidth / $newHeight)) {			// by width			$nw = $newWidth;			$nh = $oldHeight * ($newWidth / $oldWidth);			$nx = 0;			$ny = round(abs($newHeight - $nh) / 2);		} else {			// by height			$nw = $oldWidth * ($newHeight / $oldHeight);			$nh = $newHeight;			$nx = round(abs($newWidth - $nw) / 2);			$ny = 0;		}		imagecopyresampled($new, $old, $nx, $ny, 0, 0, $nw, $nh, $oldWidth, $oldHeight);		switch ($image_type) {			case 1: 				$old = imagegif($new, $dstImg);				break;			case 2: 				$old = imagejpeg($new, $dstImg);				break;			case 3: 				$old = imagepng($new, $dstImg); 				break;			default: 				return;  				break;		}	}		/*	 * @author Lam Huynh	 */	public function getAvatarUrl($width=null, $height=null) {		$this->resizeAvatar($width, $height);		$imgFile = $this->generateAvatarPath($width, $height);		$imgUrl = $this->generateAvatarUrl($width, $height);		$noImageUrl = null;		return is_file($imgFile) ? $imgUrl : $noImageUrl;	}		/*	 * @author Lam Huynh	 */	protected function generateAvatarPath($width=null, $height=null) {		$paths = array(			Yii::getPathOfAlias('webroot'),			self::$folderUpload,			$this->id,			'avatar',			"{$width}x{$height}",			$this->avatar		);		if (!$width && !$height)			unset ($paths[4]);		return implode('/', $paths);	}		/*	 * @author Lam Huynh	 */	protected function generateAvatarUrl($width=null, $height=null) {		$paths = array(			Yii::app()->getBaseUrl(true),			self::$folderUpload,			$this->id,			'avatar',			"{$width}x{$height}",			$this->avatar		);		if (!$width && !$height)			unset ($paths[4]);		return implode('/', $paths);	}			/*	 * @author Lam Huynh	 */    public function getCompanyLogoUrl($width=null, $height=null, $watermark=false) {        $imgFile = $this->generateLogoPath($width, $height, $watermark);        if (!is_file($imgFile)) {			// resize image			$srcImg = $this->generateLogoPath();			$watermarkFile = $watermark ? Yii::getPathOfAlias('webroot') . '/upload/watermark.png' : null;			ImageHelper::resize($srcImg, $imgFile, $width, $height, array('watermarkFile'=>$watermarkFile));		}		        $imgUrl = $this->generateLogoUrl($width, $height, $watermark);        return is_file($imgFile) ? $imgUrl : null;    }    	/*	 * Generate the filename corresponding to the dimension	 * Need to change the code when copy to another model	 * 	 * @author Lam Huynh	 */    protected function generateLogoPath($width=null, $height=null, $watermark=false) {        $paths = array(            0 => Yii::getPathOfAlias('webroot'),            1 => self::$folderUpload,            2 => $this->id,            3 => "avatar",            4 => "{$width}x{$height}",            5 => $this->agent_company_logo        );		if ($watermark)			$paths[5] = 'w'.$paths[5];        if (!$width && !$height)            unset ($paths[4]);        return implode('/', $paths);    }    	/*	 * Generate the image url corresponding to the dimension	 * Need to change the code when copy to another model	 * 	 * @author Lam Huynh	 */    protected function generateLogoUrl($width=null, $height=null, $watermark=false) {        $paths = array(            0 => Yii::app()->baseUrl,            1 => self::$folderUpload,            2 => $this->id,            3 => "avatar",            4 => "{$width}x{$height}",            5 => $this->agent_company_logo        );		if ($watermark)			$paths[5] = 'w'.$paths[5];        if (!$width && !$height)            unset ($paths[4]);         return implode('/', $paths);    }		public static function getTelemarketers() {		$c = new CDbCriteria();		$c->compare('role_id', ROLE_TELEMARKETER);		$c->compare('status', STATUS_ACTIVE);		$c->order = 'name_for_slug';		return static::model()->findAll($c);	}}